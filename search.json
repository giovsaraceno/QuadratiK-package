[{"path":[]},{"path":"/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge make participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces, also applies individual representing project community public spaces. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team gsaracen buffalo.edu. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to QuadratiK package","title":"Contributing to QuadratiK package","text":"Version: 1.1.2 First , thanks considering contributing QuadratiK! 👍 QuadratiK comprehensive statistical analysis package providing comprehensive set goodness--fit tests clustering technique spherical data using kernel-based quadratic distances.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"Contributing to QuadratiK package","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/CONTRIBUTING.html","id":"share-the-love-️","dir":"","previous_headings":"Code of conduct","what":"Share the love ❤️","title":"Contributing to QuadratiK package","text":"Think QuadratiK useful? Let others discover , telling person, via Twitter, ResearchGate blog post. Using QuadratiK paper writing? Cite .","code":""},{"path":"/CONTRIBUTING.html","id":"ask-a-question","dir":"","previous_headings":"Code of conduct","what":"Ask a question","title":"Contributing to QuadratiK package","text":"Using QuadratiK got stuck? Browse documentation see can find solution. Post questions requests issue GitHub. ’ll try best address , questions often lead better documentation discovery bugs. Want ask question private? Contact package maintainer gsaracen@buffalo.edu.","code":""},{"path":"/CONTRIBUTING.html","id":"propose-an-idea-","dir":"","previous_headings":"Code of conduct","what":"Propose an idea 💡","title":"Contributing to QuadratiK package","text":"idea new QuadratiK feature? Take look documentation issue list see isn’t included suggested yet. , suggest idea issue GitHub. Please Explain detail work. Keep scope narrow possible. Functions described comments near code translated documentation using roxygen2. Write documentation using roxygen2 package. Test changes goodpractice submitting. try follow GitHub flow development. Fork repo clone computer. learn process, see guide. forked cloned project since worked , pull changes original repo clone using git pull upstream master. Open RStudio project file (.Rproj). Write code. Test code (bonus points adding unit tests). Document code (see function documentation ). Check code devtools::check() aim 0 errors warnings. Commit push changes. Submit pull request.","code":""},{"path":"/CONTRIBUTING.html","id":"report-a-bug","dir":"","previous_headings":"Code of conduct","what":"Report a bug","title":"Contributing to QuadratiK package","text":"Using QuadratiK discovered bug? ’s annoying! Don’t let others experience report issue GitHub can fix . good bug report makes easier us , please include: operating system name version (e.g. Mac OS 10.13.6). details local setup might helpful troubleshooting. Detailed steps reproduce bug.","code":""},{"path":"/CONTRIBUTING.html","id":"the-website","dir":"","previous_headings":"Code of conduct > Report a bug","what":"The website","title":"Contributing to QuadratiK package","text":"website generated pkgdown. means don’t write html: content pulled together documentation code, vignettes, Markdown files, package DESCRIPTION _pkgdown.yml settings. know way around pkgdown, can propose file change improve documentation. , report issue can point right direction.","code":""},{"path":"/CONTRIBUTING.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Contributing to QuadratiK package","text":"QuadratiK package engineered combination R C++ code balance usability high-speed computation, catering complex data analysis needs. package undergone extensive testing various examples. Continuous integration practices employed maintain high standards reliability functionality. QuadratiK first released CRAN February 23, 2024. Regular updates bug fixes planned continually enhance package’s functionality user experience. actively planning include additional methods based kernel-based quadratic-distance. One primary goals make QuadratiK increasingly user-friendly, improvements user experience layout outputs. User feedback highly valued key driver future development. Life Cycle Statement subject periodic review updated reflect evolving nature QuadratiK.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/Introduction.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Introduction to the QuadratiK Package","text":"QuadratiK package provides first implementation, R Python, comprehensive set goodness--fit tests clustering technique spherical data using kernel-based quadratic distances. primary goal QuadratiK offer flexible tools testing multivariate high-dimensional data uniformity, normality, comparing two samples. package includes several novel algorithms designed handle spherical data, often encountered fields like directional statistics, geospatial data analysis, signal processing. particular, offers functions clustering spherical data efficiently, computing density value generating random samples Poisson kernel-based density.","code":""},{"path":"/articles/Introduction.html","id":"installation","dir":"Articles","previous_headings":"Overview","what":"Installation","title":"Introduction to the QuadratiK Package","text":"can install version published CRAN QuadratiK: development version GitHub: QuadratiK package also available Python PyPI Dashboard application. Usage instruction Dashboard can found https://quadratik.readthedocs.io/en/latest/user_guide/dashboard_application_usage.html.","code":"install.packages(\"QuadratiK\") library(devtools) devtools::install_github('giovsaraceno/QuadratiK-package')"},{"path":"/articles/Introduction.html","id":"citation","dir":"Articles","previous_headings":"Overview","what":"Citation","title":"Introduction to the QuadratiK Package","text":"use package research work, please cite follows: Saraceno G, Markatou M, Mukhopadhyay R, Golzy M (2024). QuadratiK: Collection Methods Constructed using Kernel-Based Quadratic Distances. https://cran.r-project.org/package=QuadratiK associated paper: Saraceno Giovanni, Markatou Marianthi, Mukhopadhyay Raktim, Golzy Mojgan (2024). Goodness--Fit Clustering Spherical Data: QuadratiK package R Python. arXiv preprint arXiv:2402.02290.","code":"@Manual{saraceno2024QuadratiK,     title = {QuadratiK: Collection of Methods Constructed using Kernel-Based              Quadratic Distances},     author = {Giovanni Saraceno and Marianthi Markatou and Raktim Mukhopadhyay              and Mojgan Golzy},     year = {2024},     note = {<https://cran.r-project.org/package=QuadratiK>,    <https://github.com/giovsaraceno/QuadratiK-package>,     <https://giovsaraceno.github.io/QuadratiK-package/>}  } @misc{saraceno2024package,     title={Goodness-of-Fit and Clustering of Spherical Data: the QuadratiK package in           R and Python},     author={Giovanni Saraceno and Marianthi Markatou and Raktim Mukhopadhyay and            Mojgan Golzy},     year={2024},     eprint={2402.02290},     archivePrefix={arXiv},     primaryClass={stat.CO},        url={<https://arxiv.org/abs/2402.02290>} }"},{"path":[]},{"path":"/articles/Introduction.html","id":"goodness-of-fit-tests","dir":"Articles","previous_headings":"Key features and basic usage","what":"Goodness-of-Fit Tests","title":"Introduction to the QuadratiK Package","text":"software implements one, two, k-sample tests goodness fit, offering efficient mathematically sound way assess fit probability distributions. tests particularly useful large, high dimensional data sets assessment fit probability models interest. provided goodness--fit tests can performed using kb.test() function. kernel-based quadratic distance tests constructed using normal kernel depends tuning parameter hh. value hh provided, function perform select_h() algorithm searching optimal value. details please visit relative help documentations. proposed tests perform well terms level power contiguous alternatives, heavy tailed distributions higher dimensions. Test normality test null hypothesis normality H0:F=𝒩d(μ,Σ)H_0:F=\\mathcal{N}_d(\\mu, \\Sigma) needed, can specify μ\\mu Σ\\Sigma, otherwise standard normal distribution considered. Two-sample test case want compare two samples X∼FX \\sim F Y∼GY \\sim G null hypothesis H0:F=GH_0:F=G vs H1:F≠GH_1:F\\=G. k-sample test case want compare kk samples, k>2k>2, H0:F1=F2=…=FkH_0:F_1=F_2=\\ldots=F_k vs H1:Fi≠FjH_1:F_i\\=F_j ≠ji\\= j.","code":"library(QuadratiK) ?kb.test ?select_h x <- matrix(rnorm(100), ncol = 2) # Does x come from a multivariate standard normal distribution? kb.test(x, h=0.4) ##  ##  Kernel-based quadratic distance Normality test  ##      U-statistic V-statistic ## ------------------------------------------------ ## Test Statistic:   1.454612    1.265573  ## Critical Value:   1.421826    8.901682  ## H0 is rejected:   TRUE        FALSE  ## Selected tuning parameter h:  0.4 x <- matrix(rnorm(100,4), ncol = 2) # Does x come from the specified multivariate normal distribution? kb.test(x, mu_hat = c(4,4), Sigma_hat = diag(2), h = 0.4) ##  ##  Kernel-based quadratic distance Normality test  ##      U-statistic V-statistic ## ------------------------------------------------ ## Test Statistic:   -0.7819467      0.73944  ## Critical Value:   1.995888    8.901682  ## H0 is rejected:   FALSE       FALSE  ## Selected tuning parameter h:  0.4 x <- matrix(rnorm(100), ncol = 2) y <- matrix(rnorm(100,mean = 5), ncol = 2) # Do x and y come from the same distribution? kb.test(x, y, h = 0.4) ##  ##  Kernel-based quadratic distance two-sample test  ## U-statistic   Dn          Trace  ## ------------------------------------------------ ## Test Statistic:   5.786863    11.3252  ## Critical Value:   0.6396668   1.253269  ## H0 is rejected:   TRUE        TRUE  ## CV method:  subsampling  ## Selected tuning parameter h:  0.4 x1 <- matrix(rnorm(100), ncol = 2) x2 <- matrix(rnorm(100), ncol = 2) x3 <- matrix(rnorm(100, mean = 5), ncol = 2) y <- rep(c(1, 2, 3), each = 50) # Do x1, x2 and x3 come from the same distribution? x <- rbind(x1, x2, x3) kb.test(x, y, h = 0.4) ##  ##  Kernel-based quadratic distance k-sample test  ## U-statistic   Dn          Trace  ## ------------------------------------------------ ## Test Statistic:   7.729291    11.78748  ## Critical Value:   0.716388    1.093336  ## H0 is rejected:   TRUE        TRUE  ## CV method:  subsampling  ## Selected tuning parameter h:  0.4"},{"path":"/articles/Introduction.html","id":"test-for-uniformity-on-the-sphere","dir":"Articles","previous_headings":"Key features and basic usage > Goodness-of-Fit Tests","what":"Test for uniformity on the sphere","title":"Introduction to the QuadratiK Package","text":"Expanded capabilities include supporting tests uniformity d-dimensional Sphere based Poisson kernel. Poisson kernel depends concentration parameter ρ\\rho location vector μ\\mu. details please visit help documentation pk.test() function. test null hypothesis uniformity dd-dimensional sphere 𝒮d−1={x∈ℝd:||x||=1}\\mathcal{S}^{d-1} = \\{x \\\\mathbb{R}^d : ||x||=1 \\}","code":"?pk.test # Generate points on the sphere from the uniform ditribution  x <- sample_hypersphere(d = 3, n_points = 100) # Does x come from the uniform distribution on the sphere? pk.test(x, rho = 0.7) ##  ##  Poisson Kernel-based quadratic distance test of  ##                         Uniformity on the Sphere  ## Selected consentration parameter rho:  0.7  ##  ## U-statistic: ##  ## H0 is rejected:  FALSE  ## Statistic Un:  -0.5509718  ## Critical value:  1.799643  ##  ## V-statistic: ##  ## H0 is rejected:  FALSE  ## Statistic Vn:  16.20301  ## Critical value:  23.22949"},{"path":"/articles/Introduction.html","id":"poisson-kernel-based-distribution-pkbd","dir":"Articles","previous_headings":"Key features and basic usage","what":"Poisson kernel-based distribution (PKBD)","title":"Introduction to the QuadratiK Package","text":"package offers functions computing density value generating random samples PKBD. Poisson kernel-based densities based normalized Poisson kernel defined dd-dimensional unit sphere. details please visit help documentation dpkb() rpkb() functions. Example","code":"?dpkb ?rpkb mu <- c(1,0,0) rho <- 0.9 x <- rpkb(n = 100, mu = mu, rho = rho) head(x$x) ##            [,1]        [,2]        [,3] ## [1,]  0.9976763  0.05682801 -0.03758542 ## [2,]  0.9904770 -0.04495342  0.13013249 ## [3,]  0.9888587  0.07505889 -0.12854798 ## [4,]  0.9950070  0.06974024  0.07139580 ## [5,] -0.1933329 -0.94731344 -0.25538132 ## [6,]  0.8946467  0.42830327  0.12713608 dens_x <- dpkb(x$x, mu = mu, rho = rho) head(dens_x) ##             [,1] ## [1,] 8.951661143 ## [2,] 3.381397108 ## [3,] 2.901910102 ## [4,] 5.778907486 ## [5,] 0.004769433 ## [6,] 0.169506227"},{"path":"/articles/Introduction.html","id":"clustering-algorithm-for-spherical-data","dir":"Articles","previous_headings":"Key features and basic usage","what":"Clustering Algorithm for Spherical Data","title":"Introduction to the QuadratiK Package","text":"package incorporates unique clustering algorithm specifically tailored spherical data especially useful presence noise data presence non-negligible overlap clusters. algorithm leverages mixture Poisson kernel-based densities Sphere, enabling effective clustering spherical data data spherically transformed. details please visit help documentation pkbc() function. Example software includes additional graphical functions, aiding users validating representing cluster results well enhancing interpretability usability analysis.","code":"?pkbc # Generate 3 samples from the PKBD with different location directions x1 <- rpkb(n = 100, mu = c(1,0,0), rho = rho) x2 <- rpkb(n = 100, mu = c(-1,0,0), rho = rho) x3 <- rpkb(n = 100, mu = c(0,0,1), rho = rho) x <- rbind(x1$x, x2$x, x3$x) # Perform the clustering algorithm # Serch for 2, 3 or 4 clusters cluster_res <- pkbc(dat = x, nClust = c(2, 3, 4)) summary(cluster_res) ## Poisson Kernel-Based Clustering on the Sphere (pkbc) Results ## ------------------------------------------------------------ ##  ## Summary: ##         LogLik     WCSS ## [1,] -590.6534 408.1308 ## [2,] -295.4464 320.6149 ## [3,] -286.3995 320.4550 ##  ## Results for 2 clusters: ## Estimated Mixing Proportions (alpha): ## [1] 0.2983261 0.7016739 ##  ## Clustering table: ##  ##   1   2  ##  89 211  ##  ##  ## Results for 3 clusters: ## Estimated Mixing Proportions (alpha): ## [1] 0.3370865 0.3341407 0.3287728 ##  ## Clustering table: ##  ##   1   2   3  ## 103  97 100  ##  ##  ## Results for 4 clusters: ## Estimated Mixing Proportions (alpha): ## [1] 0.003381178 0.328858098 0.333561205 0.334199519 ##  ## Clustering table: ##  ##   1   2   3   4  ##   1 100 102  97 # Predict the membership of new data with respect to the clustering results x_new <- rpkb(n = 10, mu = c(1,0,0), rho = rho) memb_mew <- predict(cluster_res, k = 3, newdata = x_new$x) memb_mew$Memb ##  [1] 1 1 1 1 1 1 1 1 1 1 # Compute measures for evaluating the clustering results val_res <- pkbc_validation(cluster_res) val_res ## $metrics ##             2        3         4 ## ASW 0.4980303 0.704625 0.5818335 ##  ## $IGP ## $IGP[[1]] ## NULL ##  ## $IGP[[2]] ## [1] 0.9908257 1.0000000 ##  ## $IGP[[3]] ## [1] 1 1 1 ##  ## $IGP[[4]] ## [1] 1 1 1 1 # Plot method for the pkbc object: # - scatter plot of data points on the sphere # - elbow plot for helping the choice of the number of clusters plot(cluster_res)"},{"path":"/articles/Introduction.html","id":"additional-resources","dir":"Articles","previous_headings":"","what":"Additional Resources","title":"Introduction to the QuadratiK Package","text":"detailed information QuadratiK package, can explore following resources: Package Documentation CRAN – Official package documentation CRAN. GitHub Repository – GitHub repository development version, issues, community discussions. QuadratiK Package Website – dedicated website additional tutorials examples. ’re new package, recommend starting available vignettes: Two-sample test k-sample test Test uniformity Clustering sphere Generate PKBD","code":""},{"path":"/articles/Introduction.html","id":"references","dir":"Articles","previous_headings":"Additional Resources","what":"References","title":"Introduction to the QuadratiK Package","text":"information methods implemented package, refer associated research papers: Markatou, M. Saraceno, G. (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.” arXiv:2407.16374 Ding, Y., Markatou, M. Saraceno, G. (2023). “Poisson Kernel-Based Tests Uniformity d-Dimensional Sphere.” Statistica Sinica. doi: 10.5705/ss.202022.0347. Golzy, M. Markatou, M. (2020) Poisson Kernel-Based Clustering Sphere: Convergence Properties, Identifiability, Method Sampling, Journal Computational Graphical Statistics, 29:4, 758-770, DOI: 10.1080/10618600.2020.1740713.","code":""},{"path":"/articles/TwoSample_test.html","id":"non-parametric-two-sample-test","dir":"Articles","previous_headings":"","what":"Non-parametric two-sample test","title":"Non-parametric Two-sample test","text":"Let x1,x2,…,xn1∼Fx_1, x_2, \\ldots, x_{n_1} \\sim F y1,y2,…,yn2∼Gy_1, y_2, \\ldots, y_{n_2} \\sim G random samples distributions FF GG, respectively. test null hypothesis two samples generated unknown distribution F‾\\bar{F}, : H0:F=G=F‾ H_0: F = G = \\bar{F} versus alternative hypothesis two distributions different, H1:F≠G. H_1: F \\= G.  compute kernel-based quadratic distance (KBQD) tests tracen=1n1(n1−1)∑=1n1∑j≠in1KF‾(𝐱i,𝐱j)+1n2(n2−1)∑=1n2∑j≠in2KF‾(𝐲i,𝐲j),     \\mathrm{trace}_n =  \\frac{1}{n_1(n_1-1)}\\sum_{=1}^{n_1} \\sum_{j \\=}^{n_1} K_{\\bar{F}}(\\mathbf{x}_i,\\mathbf{x}_j) + \\frac{1}{n_2(n_2-1)}\\sum_{=1}^{n_2} \\sum_{j \\=}^{n_2} K_{\\bar{F}}(\\mathbf{y}_i,\\mathbf{y}_j),  Dn=1n1(n1−1)∑=1n1∑j≠in2KF‾(𝐱i,𝐱j)−2n1n2∑=1n1∑j=1n2KF‾(𝐱i,𝐲j)+1n2(n2−1)∑=1n2∑j≠in2KF‾(𝐲i,𝐲j).     D_{n} =  \\frac{1}{n_1(n_1-1)}\\sum_{=1}^{n_1} \\sum_{j \\=}^{n_2} K_{\\bar{F}}(\\mathbf{x}_i,\\mathbf{x}_j) - \\frac{2}{n_1 n_2}\\sum_{=1}^{n_1} \\sum_{j =1}^{n_2} K_{\\bar{F}}(\\mathbf{x}_i,\\mathbf{y}_j)       + \\frac{1}{n_2(n_2-1)}\\sum_{=1}^{n_2} \\sum_{j \\=}^{n_2} K_{\\bar{F}}(\\mathbf{y}_i,\\mathbf{y}_j).  \\nonumber  KF‾K_{\\bar{F}} denotes Normal kernel KK defined K(𝐬,𝐭)=(2π)−d/2(det𝚺h)−12exp{−12(𝐬−𝐭)⊤𝚺h−1(𝐬−𝐭)}, K(\\mathbf{s}, \\mathbf{t}) = (2 \\pi)^{-d/2}  \\left(\\det{\\mathbf{\\Sigma}_h}\\right)^{-\\frac{1}{2}}   \\exp\\left\\{-\\frac{1}{2}(\\mathbf{s} - \\mathbf{t})^\\top  \\mathbf{\\Sigma}_h^{-1}(\\mathbf{s} - \\mathbf{t})\\right\\}, every 𝐬,𝐭∈ℝd×ℝd\\mathbf{s}, \\mathbf{t} \\\\mathbb{R}^d \\times \\mathbb{R}^d, covariance matrix 𝚺h=h2I\\mathbf{\\Sigma}_h = h^2 tuning parameter hh, centered respect F‾=n1F+n2Gn1+n2\\bar{F} = \\frac{n_1F + n_2G}{n_1 + n_2}. information centering kernel, see documentation kb.test() function. KBQD tests exhibit high power asymmetric alternatives close null hypothesis small sample size. consider example scenario. generate samples x=(x1,…,xn)x = (x_1, \\ldots,x_n) standard normal distribution Nd(0,Id)N_d(0,I_d) y=(y1,…,yn)y = (y_1, \\ldots,y_n) skew-normal distribution SNd(0,Id,λ)SN_d(0,I_d, \\lambda), d=4d=4, n=100n=100 λ=(0.5,…,0.5)\\lambda= (0.5,\\ldots,0.5). two-sample test can performed providing two samples compared x y kb.test() function. value hh provided, function automatically performs function select_h. can display chosen optimal value hh together power plot obtained versus considered hh, alternatives δ\\delta select_h() function.  details visit help documentation select_h() function. two-sample case, summary function provides results test list tables standard descriptive statistics variable, computed per group overall. Additionally, generates qq-plots comparing quantiles two groups variable.","code":"help(kb.test) library(sn) library(mvtnorm) library(QuadratiK) n <- 100 d <- 4 skewness_y <- 0.5 set.seed(2468) x_2 <- rmvnorm(n, mean = rep(0,d)) y_2 <- rmsn(n=n, xi=0, Omega = diag(d), alpha=rep(skewness_y,d)) set.seed(2468) two_test <- kb.test(x=x_2, y=y_2) two_test ##  ##  Kernel-based quadratic distance two-sample test  ## U-statistic   Dn          Trace  ## ------------------------------------------------ ## Test Statistic:   1.742844    2.505833  ## Critical Value:   1.031779    1.484304  ## H0 is rejected:   TRUE        TRUE  ## CV method:  subsampling  ## Selected tuning parameter h:  2 two_test@h$h_sel ## [1] 2 two_test@h$power.plot help(select_h) summary_two <- summary(two_test) ##  ##  Kernel-based quadratic distance two-sample test  ##   Statistic    Value Critical_Value Reject_H0 ## 1        Dn 1.742844       1.031779      TRUE ## 2     Trace 2.505833       1.484304      TRUE summary_two$summary_tables ## [[1]] ##             Group 1    Group 2    Overall ## mean   -0.005393522  0.3197861  0.1571963 ## sd      1.039119207  0.9094193  0.9875137 ## median -0.019317321  0.4448058  0.1601955 ## IQR     1.562613453  1.3612937  1.4292426 ## min    -2.675477796 -1.4256211 -2.6754778 ## max     2.151784802  2.9375947  2.9375947 ##  ## [[2]] ##            Group 1    Group 2     Overall ## mean   -0.10005083  0.1936138  0.04678149 ## sd      1.10476260  1.0556439  1.08777010 ## median -0.07955849  0.2235325  0.10130247 ## IQR     1.48816630  1.4716179  1.41498342 ## min    -3.22222061 -2.4336333 -3.22222061 ## max     2.50192633  2.6879362  2.68793623 ##  ## [[3]] ##             Group 1    Group 2     Overall ## mean   -0.006524772  0.1701261  0.08180065 ## sd      0.958942739  0.9524916  0.95742170 ## median -0.039301279  0.1887394  0.11877637 ## IQR     1.329868172  1.4657107  1.40312077 ## min    -2.860006689 -2.1762183 -2.86000669 ## max     1.923763114  2.4237195  2.42371949 ##  ## [[4]] ##            Group 1    Group 2     Overall ## mean   -0.06757686  0.2236458  0.07803449 ## sd      0.98684958  0.9862135  0.99481815 ## median -0.03258747  0.1097711  0.05517931 ## IQR     1.30933016  1.4088334  1.39890664 ## min    -2.29625537 -2.1827156 -2.29625537 ## max     2.40795077  2.9929942  2.99299420"},{"path":"/articles/TwoSample_test.html","id":"select-h","dir":"Articles","previous_headings":"Non-parametric two-sample test","what":"Select h","title":"Non-parametric Two-sample test","text":"search optimal value tuning parameter hh can performed independently test computation using select_h function. requires two samples, provided x y, considered family alternatives. code evaluated since obtain results.","code":"set.seed(2468) two_test_h <- select_h(x=x_2, y=y_2, alternative = \"skewness\")"},{"path":"/articles/TwoSample_test.html","id":"note","dir":"Articles","previous_headings":"Non-parametric two-sample test","what":"Note","title":"Non-parametric Two-sample test","text":"Notice test statistics two-sample testing coincide kk-sample test statistics k=2k=2. Hence, alternatively two sample tests can performed providing two samples together x indicating membership groups argument y. See k-sample test vignette details. kb.test() function, critical value can computed subsampling, bootstrap permutation algorithm. default method set subsampling since needs less computational time. details sampling algorithm see documentation kb.test() function. details level power performance considered two-sample tests, see extensive simulation study reported following reference.","code":"x_pool <- rbind(x_2,y_2) y_memb <- rep(c(1,2),each=n) h <- two_test@h$h_sel set.seed(2468) kb.test(x=x_pool, y=y_memb, h=h) ##  ##  Kernel-based quadratic distance k-sample test  ## U-statistic   Dn          Trace  ## ------------------------------------------------ ## Test Statistic:   1.742844    2.505833  ## Critical Value:   1.031779    1.484304  ## H0 is rejected:   TRUE        TRUE  ## CV method:  subsampling  ## Selected tuning parameter h:  2"},{"path":"/articles/TwoSample_test.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Non-parametric Two-sample test","text":"Markatou, M. Saraceno, G. (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.”https://doi.org/10.48550/arXiv.2407.16374","code":""},{"path":"/articles/generate_rpkb.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"Random sampling from the Poisson kernel-based density","text":"limitation rejvmf method ensure computational feasibility sampler ρ\\rho approaching 1.","code":""},{"path":"/articles/generate_rpkb.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Random sampling from the Poisson kernel-based density","text":"Golzy, M. Markatou, M. (2020). Poisson Kernel-Based Clustering Sphere: Convergence Properties, Identifiability, Method Sampling, Journal Computational Graphical Statistics, 29(4), 758-770. DOI: 10.1080/10618600.2020.1740713. Sablica, L., Hornik, K. Leydold, J. (2023). “Efficient sampling PKBD distribution”, Electronic Journal Statistics, 17(2), 2180-2209. DOI: 10.1214/23-EJS2149","code":""},{"path":"/articles/kSample_test.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"k-sample test","text":"value hh provided kb.test(), function performs function select_h automatic search optimal value hh use. . following code shows usage, executed since obtain results. details visit help documentation select_h() function. kb.test() function, critical value can computed subsampling, bootstrap permutation algorithm. default method set subsampling since needs less computational time. details sampling algorithm see documentation kb.test() function following reference. proposed tests exhibit high power asymmetric alternatives close null hypothesis small sample size, well k≥3k \\ge 3 sample comparison, dimension d>2d>2 sample sizes. details, see extensive simulation study reported following reference.","code":"k_test_h <- kb.test(x=x, y=y) help(select_h)"},{"path":"/articles/kSample_test.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"k-sample test","text":"Markatou, M. Saraceno, G. (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.”https://doi.org/10.48550/arXiv.2407.16374","code":""},{"path":"/articles/uniformity.html","id":"uniformity-test-on-the-sphere","dir":"Articles","previous_headings":"","what":"Uniformity test on the Sphere","title":"Uniformity test on the Sphere","text":"Let x1,x2,…,xn∼Fx_1, x_2, \\ldots, x_n \\sim F random sample empirical distribution function F̂\\hat{F}. test null hypothesis uniformity dd-dimensional sphere, .e., H0:F=GH_0: F = G GG uniform distribution dd-dimensional sphere 𝒮d−1\\mathcal{S}^{d-1}. compute U-statistic estimate sample KBQD (Kernel-Based Quadratic Distance) Un=2n(n−1)∑=2n∑j=1i−1Kcen(𝐱i,𝐱j), U_{n}=\\frac{2}{n(n-1)}\\sum_{=2}^{n}\\sum_{j=1}^{-1}K_{cen}(\\mathbf{x}_{}, \\mathbf{x}_{j}),  first test statistic given Tn=UnVar(Un),T_{n}=\\frac{U_{n}}{\\sqrt{Var(U_{n})}}, Var(Un)=2n(n−1)[1+ρ2(1−ρ2)d−1−1], Var(U_{n})= \\frac{2}{n(n-1)}\\left[\\frac{1+\\rho^{2}}{(1-\\rho^{2})^{d-1}}-1\\right], V-statistic estimate KBQDVn=1n∑=1n∑j=1nKcen(𝐱i,𝐱j), V_{n} = \\frac{1}{n}\\sum_{=1}^{n}\\sum_{j=1}^{n}K_{cen}(\\mathbf{x}_{}, \\mathbf{x}_{j}),  KcenK_{cen} denotes Poisson kernel KρK_\\rho centered respect uniform distribution dd-dimensional sphere, Kcen(𝐮,𝐯)=Kρ(𝐮,𝐯)−1 K_{cen}(\\mathbf{u}, \\mathbf{v}) = K_\\rho(\\mathbf{u}, \\mathbf{v}) -1   Kρ(𝐮,𝐯)=1−ρ2(1+ρ2−2ρ(𝐮⋅𝐯))d/2, K_\\rho(\\mathbf{u}, \\mathbf{v}) = \\frac{1-\\rho^{2}}{\\left(1+\\rho^{2}-2\\rho (\\mathbf{u}\\cdot \\mathbf{v})\\right)^{d/2}}, every 𝐮,𝐯∈𝒮d−1×𝒮d−1\\mathbf{u}, \\mathbf{v} \\\\mathcal{S}^{d-1} \\times \\mathcal{S}^{d-1}. generated n=200n=200 observations uniform distribution Sd−1S^{d-1}, d=3d=3. pk.test used testing uniformity generated sample, providing data matrix x value concentration parameter rho. pk.test() function returns object class pk.test. show function displays computed statistics corresponding critical values. test correctly reject null hypothesis uniformity. summary function pk.test output object provides results performed test, generates figure showing qq-plots uniform distribution variable table standard descriptive statistics.  figure automatically generated summary function result test uniformity displays qq-plots given samples uniform distribution table standard descriptive statistics variable.","code":"library(QuadratiK) n <- 200 d <- 3 set.seed(2468) z <- matrix(rnorm(n * d), n, d) dat_sphere <- z/sqrt(rowSums(z^2)) rho <- 0.7 set.seed(2468) res_unif <- pk.test(x=dat_sphere, rho=rho)  show(res_unif) ##  ##  Poisson Kernel-based quadratic distance test of  ##                         Uniformity on the Sphere  ## Selected consentration parameter rho:  0.7  ##  ## U-statistic: ##  ## H0 is rejected:  FALSE  ## Statistic Un:  -0.9756673  ## Critical value:  1.725683  ##  ## V-statistic: ##  ## H0 is rejected:  FALSE  ## Statistic Vn:  14.89598  ## Critical value:  23.22949 summary_unif <- summary(res_unif) ##  ##  Poisson Kernel-based quadratic distance test of  ##                         Uniformity on the Sphere  ##   Test_Statistics Critical_Value Reject_H0 ## 1      -0.9756673       1.725683     FALSE ## 2      14.8959834      23.229487     FALSE"},{"path":"/articles/uniformity.html","id":"multimodal-example","dir":"Articles","previous_headings":"Uniformity test on the Sphere","what":"Multimodal example","title":"Uniformity test on the Sphere","text":"Poisson kernel-based test uniformity exhibits excellent results especially case multimodal distributions. example, generate data points mixture 4 von Mises-Fisher distributions 2 dimensions. direction mean vectors distributions set (1, 0), (0, 1), (-1, 0), (0, -1), concentration parameter κ=5\\kappa=5. now compare results pk.test function Ajne Bingham tests using sphunif package. example, Poisson kernel-based test statistics reject null hypothesis, Bingham test Ajne test obtain p-values equal 0.0532 0.3156, respectively.","code":"# Load necessary libraries library(movMF)         library(sphunif) set.seed(2468) # Define the mean directions of the 4 von Mises-Fisher distributions means <- rbind(   c(1, 0),       c(0, 1),       c(-1,0),      c(0, -1)     ) # Define the concentration parameter (kappa) kappa <- 5 # Generate 100 samples from a mixture of 4 von Mises-Fisher distributions samples <- matrix(rmovMF(100, theta = kappa * means), ncol=2) # Run the pk.test from the QuadratiK package to test the data pk_test_result <- pk.test(samples, rho=0.8)  # Run the Bingham and Ajne tests from the sphunif package other_test_result <- unif_test(samples, type = c(\"Bingham\", \"Ajne\"))  pk_test_result ##  ##  Poisson Kernel-based quadratic distance test of  ##                         Uniformity on the Sphere  ## Selected consentration parameter rho:  0.8  ##  ## U-statistic: ##  ## H0 is rejected:  TRUE  ## Statistic Un:  2.692594  ## Critical value:  1.612663  ##  ## V-statistic: ##  ## H0 is rejected:  TRUE  ## Statistic Vn:  15.14426  ## Critical value:  12.8308 other_test_result ## $Bingham ##  ##  Bingham test of circular uniformity ##  ## data:  samples ## statistic = 5.8674, p-value = 0.0532 ## alternative hypothesis: scatter matrix different from constant ##  ##  ## $Ajne ##  ##  Ajne test of circular uniformity ##  ## data:  samples ## statistic = 0.28268, p-value = 0.3156 ## alternative hypothesis: any non-axial alternative to circular uniformity"},{"path":"/articles/uniformity.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Uniformity test on the Sphere","text":"Ding, Y., Markatou, M. Saraceno, G. (2023). “Poisson Kernel-Based Tests Uniformity d-Dimensional Sphere.” Statistica Sinica. doi:10.5705/ss.202022.0347.","code":""},{"path":"/articles/wireless_clustering.html","id":"the-wireless-indoor-localization-data","dir":"Articles","previous_headings":"","what":"The Wireless Indoor Localization Data","title":"Clustering algorithm on the Wireless data","text":"consider Wireless Indoor Localization Data Set, publicly available UCI Machine Learning Repository’s website. data set used study performance different indoor localization algorithms. available within QuadratiK package wireless. Wireless Indoor Localization data set contains measurements Wi-Fi signal strength different indoor rooms. consists data frame 2000 rows 8 columns. first 7 variables report values Wi-Fi signal strength received 7 different Wi-Fi routers office location Pittsburgh (USA). last column indicates class labels, 1 4, indicating different rooms. Notice , Wi-Fi signal strength measured dBm, decibel milliwatts, expressed negative value ranging -100 0. total, 500 observations room. Given Wi-Fi signal strength values inherently bounded within certain range, possible consider spherically transformed data points using L2L_2 normalization. transformation maps data onto surface 7-dimensional sphere, ensuring observation uniform length. projecting data onto high-dimensional sphere, can take advantage spherical geometry, consequently perform proposed clustering algorithm. perform clustering algorithm wireless data set. consider K=3,4,5K= 3, 4, 5 possible values number clusters. pkbc function creates object class pkbc containing clustering results value number clusters considered. guide choice number clusters, function pkbc_validation provides cluster validation measures graphical tools. Specifically, returns object InGroup Proportion (IGP), metrics, table computed evaluation measures. table includes Average Silhouette Width (ASW) , true labels provided, measures adjusted rand index (ARI), Macro-Precision Macro-Recall. clusters identified k=4k=4 achieve high values ARI, Macro Precision Macro Recall. brief description reported evaluation measures, corresponding references, please visit help documentation pkbc_validation function. plot method pkbc class can used display scatter plot data points Elbow plot computed within-cluster sum squares values. scatter plot, d=2d=2 d=3d=3, observations displayed unit circle unit sphere, respectively. d>3d>3, spherical PCA applied data set, first 3 principal components used visualizing data points sphere. generated scatter plot specified number clusters, data points colored assigned membership.  Elbow plots reported metrics suggest K=4K=4 number clusters. accordance known ground truth. Additionally, true labels available provided plot method, scatter plot display data points colored respect true labels assigned memberships two adjacent plots.  plot points using principal components also shows identified cluster follows initial labels. number clusters selected, method summary_stat can used obtain additional summary information respect clustering results. particular, function provides mean, standard deviation, median, inter-quantile range, minimum maximum computed variable, overall assigned membership.","code":"library(QuadratiK) head(wireless) ##    V1  V2  V3  V4  V5  V6  V7 V8 ## 1 -64 -56 -61 -66 -71 -82 -81  1 ## 2 -68 -57 -61 -65 -71 -85 -85  1 ## 3 -63 -60 -60 -67 -76 -85 -84  1 ## 4 -61 -60 -68 -62 -77 -90 -80  1 ## 5 -63 -65 -60 -63 -77 -81 -87  1 ## 6 -64 -55 -63 -66 -76 -88 -83  1 wire <- wireless[,-8] labels <- wireless[,8] wire_norm <- wire/sqrt(rowSums(wire^2)) set.seed(2468) res_pk <- pkbc(as.matrix(wire_norm),3:5) set.seed(2468) res_validation <- pkbc_validation(res_pk, true_label = labels) res_validation$IGP ## [[1]] ## NULL ##  ## [[2]] ## NULL ##  ## [[3]] ## [1] 0.9429038 0.9860558 0.9706215 ##  ## [[4]] ## [1] 0.9662698 0.9733607 0.9526627 0.9880240 ##  ## [[5]] ## [1] 0.9713701 0.7727273 0.9880240 0.9639831 0.9433498 round(res_validation$metrics, 5) ##                       3       4       5 ## ASW             0.35326 0.38031 0.30240 ## ARI             0.69526 0.94031 0.91409 ## Macro_Precision 0.48150 0.97719 0.00120 ## Macro_Recall    0.48700 0.97700 0.00150 help(pkbc_validation) plot(res_pk, k = 4) plot(res_pk, k=4, true_label = labels) summary_clust <- stats_clusters(res_pk,4) summary_clust ## [[1]] ##            Group 1     Group 2     Group 3     Group 4     Overall ## mean   -0.33976246 -0.23423419 -0.29470203 -0.34377323 -0.30363137 ## sd      0.01283014  0.05324085  0.01581506  0.01298448  0.05251967 ## median -0.33952107 -0.24604104 -0.29625176 -0.34242063 -0.31847692 ## IQR     0.01674475  0.03014941  0.02182651  0.01835030  0.06412536 ## min    -0.37455424 -0.30643954 -0.34994496 -0.39357081 -0.39357081 ## max    -0.29339739 -0.06308050 -0.23847076 -0.31226867 -0.06308050 ##  ## [[2]] ##            Group 1     Group 2     Group 3     Group 4     Overall ## mean   -0.30636324 -0.35918738 -0.32636022 -0.31540450 -0.32655905 ## sd      0.01392354  0.02052666  0.01842337  0.01608549  0.02635941 ## median -0.30600005 -0.35809184 -0.32487137 -0.31538238 -0.32221067 ## IQR     0.01958541  0.02460137  0.02426854  0.02263003  0.03624468 ## min    -0.35600342 -0.45578394 -0.40026324 -0.36631517 -0.45578394 ## max    -0.26903743 -0.30605235 -0.27775661 -0.27586207 -0.26903743 ##  ## [[3]] ##            Group 1     Group 2     Group 3     Group 4     Overall ## mean   -0.32905221 -0.35786158 -0.31417147 -0.28929074 -0.32231793 ## sd      0.01563476  0.02459888  0.01710971  0.02094437  0.03163402 ## median -0.32915518 -0.35575396 -0.31237754 -0.29072716 -0.32209343 ## IQR     0.01957377  0.03437142  0.02422092  0.02851547  0.03973413 ## min    -0.38248214 -0.43623816 -0.38676345 -0.33639128 -0.43623816 ## max    -0.28256746 -0.28237524 -0.26460827 -0.23485570 -0.23485570 ##  ## [[4]] ##            Group 1     Group 2     Group 3     Group 4     Overall ## mean   -0.34918727 -0.24111635 -0.30079691 -0.35013402 -0.31082318 ## sd      0.01475930  0.04839750  0.01973759  0.01679759  0.05251032 ## median -0.34858664 -0.24898566 -0.30107248 -0.35004522 -0.32519736 ## IQR     0.01898212  0.03356955  0.02672633  0.02286452  0.06907237 ## min    -0.40129910 -0.31690470 -0.35542814 -0.41273961 -0.41273961 ## max    -0.30779911 -0.07399736 -0.23119131 -0.30906423 -0.07399736 ##  ## [[5]] ##            Group 1     Group 2     Group 3     Group 4     Overall ## mean   -0.38226045 -0.43319403 -0.37583631 -0.28257085 -0.36807675 ## sd      0.01770626  0.02787579  0.01814674  0.02110273  0.05820777 ## median -0.37991233 -0.43009295 -0.37549563 -0.28337199 -0.37738801 ## IQR     0.02531565  0.04108696  0.02541214  0.02710382  0.06966093 ## min    -0.45385132 -0.52580164 -0.42808192 -0.34353824 -0.52580164 ## max    -0.34027255 -0.36916034 -0.33333333 -0.21464345 -0.21464345 ##  ## [[6]] ##            Group 1     Group 2     Group 3     Group 4     Overall ## mean   -0.45125600 -0.46327257 -0.48366352 -0.49713921 -0.47391075 ## sd      0.01446455  0.02195263  0.01814601  0.01412842  0.02488735 ## median -0.45081811 -0.46519225 -0.48319020 -0.49649227 -0.47411000 ## IQR     0.01833254  0.02770315  0.02503768  0.01895624  0.03825696 ## min    -0.51475369 -0.53938031 -0.53130759 -0.53840040 -0.53938031 ## max    -0.41652096 -0.40313011 -0.44107352 -0.45551482 -0.40313011 ##  ## [[7]] ##            Group 1     Group 2     Group 3     Group 4     Overall ## mean   -0.45728346 -0.46863418 -0.48984740 -0.49701329 -0.47827795 ## sd      0.01710219  0.02396734  0.01993870  0.01587742  0.02515570 ## median -0.45703017 -0.46920446 -0.49013407 -0.49711582 -0.47914650 ## IQR     0.02311965  0.03050579  0.02784124  0.02030659  0.03643335 ## min    -0.50728615 -0.56835661 -0.54571977 -0.53648350 -0.56835661 ## max    -0.41326597 -0.38995633 -0.43815927 -0.44423198 -0.38995633"},{"path":"/articles/wireless_clustering.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"Clustering algorithm on the Wireless data","text":"number cluster k provided plot function, one scatter plot displayed possible number clusters available object class pkbc.","code":""},{"path":"/articles/wireless_clustering.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Clustering algorithm on the Wireless data","text":"Golzy, M. Markatou, M. (2020). “Poisson Kernel-Based Clustering Sphere: Convergence Properties, Identifiability, Method Sampling,” Journal Computational Graphical Statistics, 29(4), 758-770. DOI: 10.1080/10618600.2020.1740713.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Giovanni Saraceno. Author, maintainer.           ORCID 000-0002-1753-2367 Marianthi Markatou. Author. Raktim Mukhopadhyay. Author. Mojgan Golzy. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Saraceno G, Markatou M, Mukhopadhyay R, Golzy M (2024). QuadratiK: Collection Methods Constructed using Kernel-Based Quadratic Distances. Version 1.1.2, https://github.com/giovsaraceno/QuadratiK-package. Markatou M, Saraceno G (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.” arXiv preprint. https://doi.org/10.48550/arXiv.2407.16374.","code":"@Manual{,   title = {QuadratiK: Collection of Methods Constructed using Kernel-Based Quadratic Distances},   author = {Giovanni Saraceno and Marianthi Markatou and Raktim Mukhopadhyay and Mojgan Golzy},   year = {2024},   note = {Version 1.1.2},   url = {https://github.com/giovsaraceno/QuadratiK-package}, } @Article{,   title = {A Unified Framework for Multivariate Two- and k-Sample Kernel-based Quadratic Distance Goodness-of-Fit Tests},   author = {Marianthi Markatou and Giovanni Saraceno},   journal = {arXiv preprint},   year = {2024},   note = {https://doi.org/10.48550/arXiv.2407.16374}, }"},{"path":"/index.html","id":"collection-of-methods-constructed-using-the-kernel-based-quadratic-distances","dir":"","previous_headings":"","what":"Collection of Methods Constructed using Kernel-Based Quadratic Distances","title":"Collection of Methods Constructed using Kernel-Based Quadratic Distances","text":"QuadratiK provides first implementation, R Python, comprehensive set goodness--fit tests clustering technique dd-dimensional spherical data d≥2d \\ge 2 using kernel-based quadratic distances. includes: Goodness--Fit Tests: software implements one, two, k-sample tests goodness fit, offering efficient mathematically sound way assess fit probability distributions. tests particularly useful large, high dimensional data sets assessment fit probability models interest. Specifically, offer tests multivariate normality, well two- k-sample tests, testing equality two distributions interest, H0:F1=F2H_0: F_1 = F_2 H0:F1=…=FkH_0: F_1 = \\ldots = F_k respectively. proposed tests perform well terms level power contiguous alternatives, heavy tailed distributions higher dimensions. Expanded capabilities include supporting tests uniformity d-dimensional Sphere based Poisson kernel, exhibiting excellent results especially case multimodal distributions. Poisson kernel-based distribution (PKBD): package offers functions computing density value generating random samples PKBD. Poisson kernel-based densities based normalized Poisson kernel defined dd-dimensional unit sphere. Given vector μ∈𝒮d−1\\mu \\\\mathcal{S}^{d-1}, parameter ρ\\rho 0<ρ<10 < \\rho < 1, probability density function dd-variate Poisson kernel-based density defined : f(𝐱|ρ,𝛍)=1−ρ2ωd||𝐱−ρ𝛍||d,f(\\mathbf{x}|\\rho, \\mathbf{\\mu}) = \\frac{1-\\rho^2}{\\omega_d ||\\mathbf{x} - \\rho \\mathbf{\\mu}||^d}, μ\\mu vector orienting center distribution, ρ\\rho parameter control concentration distribution around vector μ\\mu related variance distribution. Furthermore, ωd=2πd/2[Γ(d/2)]−1\\omega_d = 2\\pi^{d/2} [\\Gamma(d/2)]^{-1} surface area unit sphere ℝd\\mathbb{R}^d (see Golzy Markatou, 2020). Clustering Algorithm Spherical Data: package incorporates unique clustering algorithm specifically tailored dd-dimensional spherical data especially useful presence noise data presence non-negligible overlap clusters. algorithm leverages mixture Poisson kernel-based densities dd-dimensional Sphere, enabling effective clustering spherical data data spherically transformed. Additional Features: Alongside functionalities, software includes additional graphical functions, aiding users validating representing cluster results well enhancing interpretability usability analysis. introduction usage QuadratiK see vignette Introduction QuadratiK Package.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Collection of Methods Constructed using Kernel-Based Quadratic Distances","text":"can install version published CRAN QuadratiK development version GitHub QuadratiK package also available Python PyPI https://pypi.org/project/QuadratiK/ also Dashboard application. Usage instruction Dashboard can found https://quadratik.readthedocs.io/en/latest/user_guide/dashboard_application_usage.html.","code":"install.packages(\"QuadratiK\") library(devtools) install_github('giovsaraceno/QuadratiK-package')"},{"path":"/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Collection of Methods Constructed using Kernel-Based Quadratic Distances","text":"Giovanni Saraceno, Marianthi Markatou, Raktim Mukhopadhyay, Mojgan Golzy Maintainer: Giovanni Saraceno <gsaracen@buffalo.edu>","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Collection of Methods Constructed using Kernel-Based Quadratic Distances","text":"use package research work, please cite follows: Saraceno, G., Markatou, M., Mukhopadhyay, R. Golzy, M. (2024). QuadratiK: Collection Methods Constructed using Kernel-Based Quadratic Distances. https://cran.r-project.org/package=QuadratiK, https://github.com/giovsaraceno/QuadratiK-package, https://giovsaraceno.github.io/QuadratiK-package/. associated paper: Saraceno, G., Markatou, M., Mukhopadhyay, R. Golzy, M. (2024). Goodness--Fit Clustering Spherical Data: QuadratiK package R Python. arXiv preprint arXiv:2402.02290v2.","code":"@Manual{saraceno2024QuadratiK,    title = {QuadratiK: Collection of Methods Constructed using Kernel-Based             Quadratic Distances},    author = {Giovanni Saraceno and Marianthi Markatou and Raktim Mukhopadhyay              and Mojgan Golzy},    year = {2024},    note = {<https://cran.r-project.org/package=QuadratiK>,             <https://github.com/giovsaraceno/QuadratiK-package>,             <https://giovsaraceno.github.io/QuadratiK-package/>}, } @misc{saraceno2024package,       title={Goodness-of-Fit and Clustering of Spherical Data: the QuadratiK              package in R and Python},       author={Giovanni Saraceno and Marianthi Markatou and Raktim Mukhopadhyay               and Mojgan Golzy},       year={2024},       eprint={2402.02290},       archivePrefix={arXiv},       primaryClass={stat.CO}, url={https://arxiv.org/abs/2402.02290} }"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Collection of Methods Constructed using Kernel-Based Quadratic Distances","text":"Ding, Y., Markatou, M. Saraceno, G. (2023). “Poisson Kernel-Based Tests Uniformity d-Dimensional Sphere.” Statistica Sinica. doi: 10.5705/ss.202022.0347. Golzy, M. & Markatou, M. (2020) Poisson Kernel-Based Clustering Sphere: Convergence Properties, Identifiability, Method Sampling, Journal Computational Graphical Statistics, 29:4, 758-770, DOI: 10.1080/10618600.2020.1740713. Markatou, M. Saraceno, G. (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.” arXiv:2407.16374","code":""},{"path":"/index.html","id":"details","dir":"","previous_headings":"","what":"Details","title":"Collection of Methods Constructed using Kernel-Based Quadratic Distances","text":"work supported Kaleida Health Foundation National Science Foundation.","code":""},{"path":"/reference/DOF.html","id":null,"dir":"Reference","previous_headings":"","what":"Degrees of freedom (DOF) for the Poisson kernel — DOF","title":"Degrees of freedom (DOF) for the Poisson kernel — DOF","text":"Compute Degrees Freedom (DOF) Poisson Kernel given dimension d concentration parameter rho","code":""},{"path":"/reference/DOF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degrees of freedom (DOF) for the Poisson kernel — DOF","text":"","code":"DOF(d, rho)"},{"path":"/reference/DOF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degrees of freedom (DOF) for the Poisson kernel — DOF","text":"d number dimensions rho concentration parameter","code":""},{"path":"/reference/DOF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degrees of freedom (DOF) for the Poisson kernel — DOF","text":"list containing DOF coefficient c asymptotic distribution","code":""},{"path":"/reference/DOF_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Degrees of freedom (DOF) for the Normal kernel — DOF_norm","title":"Degrees of freedom (DOF) for the Normal kernel — DOF_norm","text":"Compute Degrees Freedom (DOF) normal Kernel centered respect standard normal distribution, given dimension d bandwidth parameter h.","code":""},{"path":"/reference/DOF_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Degrees of freedom (DOF) for the Normal kernel — DOF_norm","text":"","code":"DOF_norm(Sigma_h, V)"},{"path":"/reference/DOF_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Degrees of freedom (DOF) for the Normal kernel — DOF_norm","text":"Sigma_h covariance matrix gaussian kernel V Covariance matrix tested distribution G","code":""},{"path":"/reference/DOF_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Degrees of freedom (DOF) for the Normal kernel — DOF_norm","text":"list containing DOF coefficient c asymptotic distribution","code":""},{"path":"/reference/QuadratiK-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Collection of Methods Constructed using the Kernel-Based Quadratic Distances — QuadratiK-package","title":"Collection of Methods Constructed using the Kernel-Based Quadratic Distances — QuadratiK-package","text":"Collection Methods Constructed using Kernel-Based Quadratic Distances QuadratiK provides first implementation, R Python, comprehensive set goodness--fit tests clustering technique \\(d\\)-dimensional spherical data \\(d \\ge 2\\) using kernel-based quadratic distances. includes: Goodness--Fit Tests: software implements one, two, k-sample tests goodness fit, offering efficient mathematically sound way assess fit probability distributions. tests particularly useful large, high dimensional data sets assessment fit probability models interest. Specifically, offer tests normality, well two- k-sample tests, testing equality two distributions interest, \\(H_0: F_1 = F_2\\) \\(H_0: F_1 = \\ldots = F_k\\) respectively. proposed tests perform well terms level power contiguous alternatives, heavy tailed distributions higher dimensions.  Expanded capabilities include supporting tests uniformity d-dimensional Sphere based Poisson kernel, exhibiting excellent results especially case multimodal distributions. Poisson kernel-based distribution (PKBD): package offers functions computing density value generating random samples PKBD. Poisson kernel-based densities based normalized Poisson kernel defined \\(d\\)-dimensional unit sphere. Given vector \\(\\mu \\\\mathcal{S}^{d-1}\\), parameter \\(\\rho\\) \\(0 < \\rho < 1\\), probability density function \\(d\\)-variate Poisson kernel-based density defined : $$f(\\mathbf{x}|\\rho, \\mathbf{\\mu}) = \\frac{1-\\rho^2}{\\omega_d ||\\mathbf{x} - \\rho \\mathbf{\\mu}||^d},$$ \\(\\mu\\) vector orienting center distribution, \\(\\rho\\) parameter control concentration distribution around vector \\(\\mu\\) related variance distribution. Furthermore, \\(\\omega_d = 2\\pi^{d/2} [\\Gamma(d/2)]^{-1}\\) surface area unit sphere \\(\\mathbb{R}^d\\) (see Golzy Markatou, 2020). Clustering Algorithm Spherical Data: package incorporates unique clustering algorithm specifically tailored \\(d\\)-dimensional spherical data especially useful presence noise data presence non-negligible overlap clusters. algorithm leverages mixture Poisson kernel-based densities Sphere, enabling effective clustering spherical data data spherically transformed. Additional Features: Alongside functionalities, software includes additional graphical functions, aiding users validating representing cluster results well enhancing interpretability usability analysis. introduction QuadratiK see vignette Introduction QuadratiK Package.","code":""},{"path":"/reference/QuadratiK-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collection of Methods Constructed using the Kernel-Based Quadratic Distances — QuadratiK-package","text":"work supported Kaleida Health Foundation National Science Foundation.","code":""},{"path":"/reference/QuadratiK-package.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Collection of Methods Constructed using the Kernel-Based Quadratic Distances — QuadratiK-package","text":"QuadratiK package also available Python PyPI https://pypi.org/project/QuadratiK/ also Dashboard application. Usage instruction Dashboard can found https://quadratik.readthedocs.io/en/latest/user_guide/dashboard_application_usage.html.","code":""},{"path":"/reference/QuadratiK-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Collection of Methods Constructed using the Kernel-Based Quadratic Distances — QuadratiK-package","text":"Saraceno, G., Markatou, M., Mukhopadhyay, R. Golzy, M. (2024). Goodness--Fit Clustering Spherical Data: QuadratiK package R Python. arXiv preprint arXiv:2402.02290. Ding, Y., Markatou, M. Saraceno, G. (2023). “Poisson Kernel-Based Tests Uniformity d-Dimensional Sphere.” Statistica Sinica. doi: doi:10.5705/ss.202022.0347. Golzy, M. Markatou, M. (2020) Poisson Kernel-Based Clustering Sphere: Convergence Properties, Identifiability, Method Sampling, Journal Computational Graphical Statistics, 29:4, 758-770, DOI: 10.1080/10618600.2020.1740713. Markatou, M. Saraceno, G. (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.”  https://doi.org/10.48550/arXiv.2407.16374","code":""},{"path":[]},{"path":"/reference/QuadratiK-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Collection of Methods Constructed using the Kernel-Based Quadratic Distances — QuadratiK-package","text":"Giovanni Saraceno, Marianthi Markatou, Raktim Mukhopadhyay, Mojgan Golzy Maintainer: Giovanni Saraceno gsaracen@buffalo.edu","code":""},{"path":"/reference/breast_cancer.html","id":null,"dir":"Reference","previous_headings":"","what":"Breast Cancer Wisconsin (Diagnostic) — breast_cancer","title":"Breast Cancer Wisconsin (Diagnostic) — breast_cancer","text":"breast_cancer Wisconsin data 569 rows 31 columns. first 30 variables report features computed digitized image fine needle aspirate (FNA) breast mass. describe characteristics cell nuclei present image. last column indicates class labels (Benign = 0 Malignant = 1).","code":""},{"path":"/reference/breast_cancer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breast Cancer Wisconsin (Diagnostic) — breast_cancer","text":"","code":"breast_cancer"},{"path":"/reference/breast_cancer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Breast Cancer Wisconsin (Diagnostic) — breast_cancer","text":"data frame 569 observations 31 variables.","code":""},{"path":"/reference/breast_cancer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Breast Cancer Wisconsin (Diagnostic) — breast_cancer","text":"Wolberg, W., Mangasarian, O., Street, N., & Street, W. (1993). Breast Cancer Wisconsin (Diagnostic). UCI Machine Learning Repository. https://doi.org/10.24432/C5DW2B.","code":""},{"path":"/reference/breast_cancer.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Breast Cancer Wisconsin (Diagnostic) — breast_cancer","text":"Street, W. N., Wolberg, W. H., & Mangasarian, O. L. (1993, July). Nuclear feature extraction breast tumor diagnosis. Biomedical image processing biomedical visualization (Vol. 1905, pp. 861-870). SPIE.","code":""},{"path":"/reference/breast_cancer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Breast Cancer Wisconsin (Diagnostic) — breast_cancer","text":"","code":"data(breast_cancer) summary(breast_cancer) #>     radius1          texture1       perimeter1         area1        #>  Min.   : 6.981   Min.   : 9.71   Min.   : 43.79   Min.   : 143.5   #>  1st Qu.:11.700   1st Qu.:16.17   1st Qu.: 75.17   1st Qu.: 420.3   #>  Median :13.370   Median :18.84   Median : 86.24   Median : 551.1   #>  Mean   :14.127   Mean   :19.29   Mean   : 91.97   Mean   : 654.9   #>  3rd Qu.:15.780   3rd Qu.:21.80   3rd Qu.:104.10   3rd Qu.: 782.7   #>  Max.   :28.110   Max.   :39.28   Max.   :188.50   Max.   :2501.0   #>   smoothness1       compactness1       concavity1      concave_points1   #>  Min.   :0.05263   Min.   :0.01938   Min.   :0.00000   Min.   :0.00000   #>  1st Qu.:0.08637   1st Qu.:0.06492   1st Qu.:0.02956   1st Qu.:0.02031   #>  Median :0.09587   Median :0.09263   Median :0.06154   Median :0.03350   #>  Mean   :0.09636   Mean   :0.10434   Mean   :0.08880   Mean   :0.04892   #>  3rd Qu.:0.10530   3rd Qu.:0.13040   3rd Qu.:0.13070   3rd Qu.:0.07400   #>  Max.   :0.16340   Max.   :0.34540   Max.   :0.42680   Max.   :0.20120   #>    symmetry1      fractal_dimension1    radius2          texture2      #>  Min.   :0.1060   Min.   :0.04996    Min.   :0.1115   Min.   :0.3602   #>  1st Qu.:0.1619   1st Qu.:0.05770    1st Qu.:0.2324   1st Qu.:0.8339   #>  Median :0.1792   Median :0.06154    Median :0.3242   Median :1.1080   #>  Mean   :0.1812   Mean   :0.06280    Mean   :0.4052   Mean   :1.2169   #>  3rd Qu.:0.1957   3rd Qu.:0.06612    3rd Qu.:0.4789   3rd Qu.:1.4740   #>  Max.   :0.3040   Max.   :0.09744    Max.   :2.8730   Max.   :4.8850   #>    perimeter2         area2          smoothness2        compactness2      #>  Min.   : 0.757   Min.   :  6.802   Min.   :0.001713   Min.   :0.002252   #>  1st Qu.: 1.606   1st Qu.: 17.850   1st Qu.:0.005169   1st Qu.:0.013080   #>  Median : 2.287   Median : 24.530   Median :0.006380   Median :0.020450   #>  Mean   : 2.866   Mean   : 40.337   Mean   :0.007041   Mean   :0.025478   #>  3rd Qu.: 3.357   3rd Qu.: 45.190   3rd Qu.:0.008146   3rd Qu.:0.032450   #>  Max.   :21.980   Max.   :542.200   Max.   :0.031130   Max.   :0.135400   #>    concavity2      concave_points2      symmetry2        fractal_dimension2  #>  Min.   :0.00000   Min.   :0.000000   Min.   :0.007882   Min.   :0.0008948   #>  1st Qu.:0.01509   1st Qu.:0.007638   1st Qu.:0.015160   1st Qu.:0.0022480   #>  Median :0.02589   Median :0.010930   Median :0.018730   Median :0.0031870   #>  Mean   :0.03189   Mean   :0.011796   Mean   :0.020542   Mean   :0.0037949   #>  3rd Qu.:0.04205   3rd Qu.:0.014710   3rd Qu.:0.023480   3rd Qu.:0.0045580   #>  Max.   :0.39600   Max.   :0.052790   Max.   :0.078950   Max.   :0.0298400   #>     radius3         texture3       perimeter3         area3        #>  Min.   : 7.93   Min.   :12.02   Min.   : 50.41   Min.   : 185.2   #>  1st Qu.:13.01   1st Qu.:21.08   1st Qu.: 84.11   1st Qu.: 515.3   #>  Median :14.97   Median :25.41   Median : 97.66   Median : 686.5   #>  Mean   :16.27   Mean   :25.68   Mean   :107.26   Mean   : 880.6   #>  3rd Qu.:18.79   3rd Qu.:29.72   3rd Qu.:125.40   3rd Qu.:1084.0   #>  Max.   :36.04   Max.   :49.54   Max.   :251.20   Max.   :4254.0   #>   smoothness3       compactness3       concavity3     concave_points3   #>  Min.   :0.07117   Min.   :0.02729   Min.   :0.0000   Min.   :0.00000   #>  1st Qu.:0.11660   1st Qu.:0.14720   1st Qu.:0.1145   1st Qu.:0.06493   #>  Median :0.13130   Median :0.21190   Median :0.2267   Median :0.09993   #>  Mean   :0.13237   Mean   :0.25427   Mean   :0.2722   Mean   :0.11461   #>  3rd Qu.:0.14600   3rd Qu.:0.33910   3rd Qu.:0.3829   3rd Qu.:0.16140   #>  Max.   :0.22260   Max.   :1.05800   Max.   :1.2520   Max.   :0.29100   #>    symmetry3      fractal_dimension3      y             #>  Min.   :0.1565   Min.   :0.05504    Length:569         #>  1st Qu.:0.2504   1st Qu.:0.07146    Class :character   #>  Median :0.2822   Median :0.08004    Mode  :character   #>  Mean   :0.2901   Mean   :0.08395                       #>  3rd Qu.:0.3179   3rd Qu.:0.09208                       #>  Max.   :0.6638   Max.   :0.20750"},{"path":"/reference/compare_qq.html","id":null,"dir":"Reference","previous_headings":"","what":"QQ-plot of given two samples using ggplot2 — compare_qq","title":"QQ-plot of given two samples using ggplot2 — compare_qq","text":"QQ-plot given two samples using ggplot2","code":""},{"path":"/reference/compare_qq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QQ-plot of given two samples using ggplot2 — compare_qq","text":"","code":"compare_qq(sample1, sample2, main_title)"},{"path":"/reference/compare_qq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QQ-plot of given two samples using ggplot2 — compare_qq","text":"sample1 matrix observations sample 1 sample2 matrix observations sample 2 main_title title generated plot","code":""},{"path":"/reference/compare_qq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QQ-plot of given two samples using ggplot2 — compare_qq","text":"QQ-plot given samples","code":""},{"path":"/reference/compute_CV.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the critical value for two-sample KBQD tests — compute_CV","title":"Compute the critical value for two-sample KBQD tests — compute_CV","text":"function computes critical value two-sample kernel tests centered Gaussian kernel using one three methods: bootstrap, permutation, subsampling.","code":""},{"path":"/reference/compute_CV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the critical value for two-sample KBQD tests — compute_CV","text":"","code":"compute_CV(   B,   Quantile,   data_pool,   size_x,   size_y,   h,   method,   b = 1,   compute_variance )"},{"path":"/reference/compute_CV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the critical value for two-sample KBQD tests — compute_CV","text":"B number bootstrap/permutation/subsampling samples generate. Quantile quantile bootstrap/permutation/subsampling distribution use critical value. data_pool matrix containing data used test. size_x number rows data_pool matrix corresponding group X. size_y number rows data_pool matrix corresponding group Y. h tuning parameter kernel test. method method use computing critical value (one \"bootstrap\", \"permutation\", \"subsampling\"). b subsampling block size (used method \"subsampling\"). compute_variance indicates nonparametric variance computed. Default TRUE.","code":""},{"path":"/reference/compute_CV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the critical value for two-sample KBQD tests — compute_CV","text":"critical value specified method significance level.","code":""},{"path":"/reference/compute_CV.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the critical value for two-sample KBQD tests — compute_CV","text":"Markatou Marianthi & Saraceno Giovanni (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.” https://doi.org/10.48550/arXiv.2407.16374","code":""},{"path":"/reference/compute_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute and display some descriptive statistics for the two sample tests — compute_stats","title":"Compute and display some descriptive statistics for the two sample tests — compute_stats","text":"Compute display descriptive statistics two sample tests","code":""},{"path":"/reference/compute_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute and display some descriptive statistics for the two sample tests — compute_stats","text":"","code":"compute_stats(var1, var2, var_name, eps = 3)"},{"path":"/reference/compute_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute and display some descriptive statistics for the two sample tests — compute_stats","text":"var1 vector observations given variable sample 1 var2 vector observations given variable sample 2 var_name Name variable displayed eps precision displayed statistics","code":""},{"path":"/reference/compute_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute and display some descriptive statistics for the two sample tests — compute_stats","text":"Computed statistics plot","code":""},{"path":"/reference/cv_ksample.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the critical value for the KBQD k-sample tests — cv_ksample","title":"Compute the critical value for the KBQD k-sample tests — cv_ksample","text":"function computes empirical critical value k-sample KBQD tests using centered Gaussian kernel, bootstrap, permutation, subsampling.","code":""},{"path":"/reference/cv_ksample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the critical value for the KBQD k-sample tests — cv_ksample","text":"","code":"cv_ksample(   x,   y,   h,   B = 150,   b = 0.9,   Quantile = 0.95,   method = \"subsampling\",   compute_variance = TRUE )"},{"path":"/reference/cv_ksample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the critical value for the KBQD k-sample tests — cv_ksample","text":"x matrix containing observations used k-sample test y vector indicating sample observation h tuning parameter test using Gaussian kernel B number bootstrap/permutation/subsampling samples generate b subsampling block size (used method \"subsampling\") Quantile quantile bootstrap/permutation/subsampling distribution use critical value method method use computing critical value (one \"bootstrap\", \"permutation\") compute_variance indicates nonparametric variance computed. Default TRUE.","code":""},{"path":"/reference/cv_ksample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the critical value for the KBQD k-sample tests — cv_ksample","text":"vector two critical values corresponding different formulation k-sample test statistics.","code":""},{"path":"/reference/dpkb.html","id":null,"dir":"Reference","previous_headings":"","what":"The Poisson kernel-based Distribution (PKBD) — dpkb","title":"The Poisson kernel-based Distribution (PKBD) — dpkb","text":"Poisson kernel-based densities based normalized Poisson kernel defined \\(d\\)-dimensional unit sphere. Given vector \\(\\mathbf{\\mu} \\\\mathcal{S}^{d-1}\\), \\(\\mathcal{S}^{d-1}= \\{x \\\\mathbb{R}^d : ||x|| = 1\\}\\), parameter \\(\\rho\\) \\(0 < \\rho < 1\\), probability density function \\(d\\)-variate Poisson kernel-based density defined : $$f(\\mathbf{x}|\\rho, \\mathbf{\\mu}) = \\frac{1-\\rho^2}{\\omega_d ||\\mathbf{x} - \\rho \\mathbf{\\mu}||^d},$$ \\(\\mu\\) vector orienting center distribution, \\(\\rho\\) parameter control concentration distribution around vector \\(\\mu\\) related variance distribution. Recall , \\(x = (x_1, \\ldots, x_d) \\\\mathbb{R}^d\\), \\(||x|| = \\sqrt{x_1^2 + \\ldots + x_d^2}\\). Furthermore, \\(\\omega_d = 2\\pi^{d/2} [\\Gamma(d/2)]^{-1}\\) surface area unit sphere \\(\\mathbb{R}^d\\) (see Golzy Markatou, 2020). \\(\\rho \\0\\), Poisson kernel-based density tends uniform density sphere. Connections PKBDs distributions discussed detail Golzy Markatou (2020). note \\(d=2\\), PKBDs reduce wrapped Cauchy distribution. Additionally, precise choice parameters \\(\\rho\\) \\(\\mu\\) two-dimensional PKBD becomes two-dimensional projected normal distribution. However, connection \\(d\\)-dimensional projected normal distributions carry beyond \\(d=2\\). Golzy Markatou (2020) proposed acceptance-rejection method simulating data PKBD using von Mises-Fisher envelops (rejvmf method). Furthermore Sablica, Hornik Leydold (2023) proposed new ways simulating PKBD, using angular central Gaussian envelops (rejacg) using projected Saw distributions (rejpsaw).","code":""},{"path":"/reference/dpkb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Poisson kernel-based Distribution (PKBD) — dpkb","text":"","code":"dpkb(x, mu, rho, logdens = FALSE)  rpkb(   n,   mu,   rho,   method = \"rejacg\",   tol.eps = .Machine$double.eps^0.25,   max.iter = 1000 )"},{"path":"/reference/dpkb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Poisson kernel-based Distribution (PKBD) — dpkb","text":"x Matrix (data.frame) data point sphere \\(\\mathcal{S}^{d-1}\\), \\(d \\ge 2\\). mu location vector parameter length indicating dimension generated points. rho Concentration parameter, \\(0 \\le\\) rho \\(< 1\\). logdens Logical; 'TRUE', densities returned logarithmic scale. n number observations. method string indicates method used sampling observations. available methods 'rejvmf' acceptance-rejection algorithm using von Mises-Fisher envelops (Algorithm Table 2 Golzy Markatou 2020); 'rejacg' using angular central Gaussian envelops (Algorithm Table 1 Sablica et al. 2023); 'rejpsaw' using projected Saw distributions (Algorithm Table 2 Sablica et al. 2023). tol.eps desired accuracy convergence tolerance ('rejacg' method). max.iter maximum number iterations ('rejacg' method).","code":""},{"path":"/reference/dpkb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Poisson kernel-based Distribution (PKBD) — dpkb","text":"dpkb gives density value; rpkb generates random observations PKBD.","code":""},{"path":"/reference/dpkb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Poisson kernel-based Distribution (PKBD) — dpkb","text":"function dpkb() computes density value given point x Poisson kernel-based distribution mean direction vector mu concentration parameter rho. number observations generated determined n rpkb(). function returns list matrix generated observations x, number tries numTries number acceptances numAccepted. limitation rejvmf method ensure computational feasibility sampler \\(\\rho\\) approaching 1. chosen method 'rejacg', function uniroot, stat package, used estimate beta parameter. case, complete results provided output.","code":""},{"path":"/reference/dpkb.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"The Poisson kernel-based Distribution (PKBD) — dpkb","text":"required packages (movMF rejvmf method, Tinflex rejpsaw) installed, function display message asking user install missing package(s).","code":""},{"path":"/reference/dpkb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The Poisson kernel-based Distribution (PKBD) — dpkb","text":"Golzy, M. Markatou, M. (2020) Poisson Kernel-Based Clustering Sphere: Convergence Properties, Identifiability, Method Sampling, Journal Computational Graphical Statistics, 29:4, 758-770, DOI: 10.1080/10618600.2020.1740713. Sablica L., Hornik K. Leydold J. (2023) \"Efficient sampling PKBD distribution\", Electronic Journal Statistics, 17(2), 2180-2209.","code":""},{"path":"/reference/dpkb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Poisson kernel-based Distribution (PKBD) — dpkb","text":"","code":"# Generate some data from pkbd density pkbd_dat <- rpkb(10, c(0.5,0), 0.5)  # Calculate the PKBD density values dens_val <- dpkb(pkbd_dat$x, c(0.5,0.5),0.5)"},{"path":"/reference/generate_SN.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate two samples data from skew-normal distributions — generate_SN","title":"Generate two samples data from skew-normal distributions — generate_SN","text":"function generates data skew-normal distributions specified parameters means covariance matrices.","code":""},{"path":"/reference/generate_SN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate two samples data from skew-normal distributions — generate_SN","text":"","code":"generate_SN(d, size_x, size_y, mu_x, mu_y, sigma_x, sigma_y, skewness_y)"},{"path":"/reference/generate_SN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate two samples data from skew-normal distributions — generate_SN","text":"d number dimensions. size_x number observations sample X size_y number observations sample Y mu_x mean X mu_y mean Y sigma_x standard deviation X sigma_y standard deviation Y skewness_y skewness Y (skewness X set zero).","code":""},{"path":"/reference/generate_SN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate two samples data from skew-normal distributions — generate_SN","text":"list containing generated X Y data sets.","code":""},{"path":"/reference/kb.test-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class for kernel-based distance tests with normal kernel — kb.test-class","title":"An S4 class for kernel-based distance tests with normal kernel — kb.test-class","text":"class represent results Gaussian kernel-based quadratic distance tests. includes normality test, two-sample test statistics k-sample tests.","code":""},{"path":"/reference/kb.test-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class for kernel-based distance tests with normal kernel — kb.test-class","text":"method String indicating kernel-based quadratic distance test performed. Un value test U-statistic. Vn value test V-statistic. H0_Un logical value indicating whether null hypothesis rejected according U-statistic. H0_Vn logical value indicating whether null hypothesis rejected according Vn. data List samples X (Y). CV_Un critical value computed test Un. CV_Vn critical value computed test Vn. cv_method method used estimate critical value (one \"subsampling\", \"permutation\" \"bootstrap\"). h list value bandwidth parameter used Gaussian kernel. function select_h used, also matrix computed power values resulting power plot provided. B Number bootstrap/permutation/subsampling replications. var_Un exact variance kernel-based U-statistic.","code":""},{"path":[]},{"path":"/reference/kb.test-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class for kernel-based distance tests with normal kernel — kb.test-class","text":"","code":"# create a kb.test object x <- matrix(rnorm(100),ncol=2) y <- matrix(rnorm(100),ncol=2) # Normality test kb.test(x, h=0.5) #>  #>  Kernel-based quadratic distance Normality test  #> \t\tU-statistic\tV-statistic #> ------------------------------------------------ #> Test Statistic:\t 1.310854 \t 0.7979308  #> Critical Value:\t 2.4409 \t 6.071062  #> H0 is rejected:\t FALSE \t\t FALSE  #> Selected tuning parameter h:  0.5  #>   # Two-sample test kb.test(x,y,h=0.5, method=\"subsampling\",b=0.9) #>  #>  Kernel-based quadratic distance two-sample test  #> U-statistic\t Dn \t\t Trace  #> ------------------------------------------------ #> Test Statistic:\t 0.1153108 \t 0.133021  #> Critical Value:\t 1.407721 \t 1.625753  #> H0 is rejected:\t FALSE \t\t FALSE  #> CV method:  subsampling  #> Selected tuning parameter h:  0.5  #>"},{"path":"/reference/kb.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"function performs kernel-based quadratic distance goodness--fit tests. includes tests multivariate normality, two-sample tests \\(k\\)-sample tests.","code":""},{"path":"/reference/kb.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"","code":"kb.test(   x,   y = NULL,   h = NULL,   method = \"subsampling\",   B = 150,   b = NULL,   Quantile = 0.95,   mu_hat = NULL,   Sigma_hat = NULL,   centeringType = \"Nonparam\",   K_threshold = 10,   alternative = \"skewness\" )  # S4 method for class 'ANY' kb.test(   x,   y = NULL,   h = NULL,   method = \"subsampling\",   B = 150,   b = 0.9,   Quantile = 0.95,   mu_hat = NULL,   Sigma_hat = NULL,   centeringType = \"Nonparam\",   K_threshold = 10,   alternative = \"skewness\" )  # S4 method for class 'kb.test' show(object)"},{"path":"/reference/kb.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"x Numeric matrix vector data values. y Numeric matrix vector data values. Depending input y, corresponding test performed. y = NULL, function performs tests normality x y data matrix, dimensions x, function performs two-sample test x y. y numeric factor vector, indicating group memberships observation, function performs k-sample test. h Bandwidth kernel function. value provided, algorithm selection optimal h performed automatically. See function select_h details. method method used critical value estimation (\"subsampling\", \"bootstrap\", \"permutation\")(default: \"subsampling\"). B number iterations use critical value estimation (default: 150). b size subsamples used subsampling algorithm (default: 0.8). Quantile quantile use critical value estimation, 0.95 default value. mu_hat Mean vector reference distribution. Sigma_hat Covariance matrix reference distribution. centeringType String indicating method used centering normal kernel ('Param' 'Nonparam'). K_threshold maximum number groups allowed. Default 10. control parameter. Change case 10 samples. alternative Family alternative chosen selecting h, \"location\", \"scale\" \"skewness\" (h provided). object Object class kb.test","code":""},{"path":"/reference/kb.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"S4 object class kb.test containing results kernel-based quadratic distance tests, based normal kernel. object contains following slots: method: Description kernel-based quadratic distance test performed. x Data list samples X (Y). Un value U-statistic. H0_Un logical value indicating whether null hypothesis rejected according Un. CV_Un critical value computed test Un. Vn value V-statistic (available). H0_Vn logical value indicating whether null hypothesis rejected according Vn (available). CV_Vn critical value computed test Vn (available). h List value bandwidth parameter used normal kernel function. select_h used, matrix computed power values corresponding power plot also provided. B Number bootstrap/permutation/subsampling replications. var_Un exact variance kernel-based U-statistic. cv_method method used estimate critical value (one \"subsampling\", \"permutation\" \"bootstrap\").","code":""},{"path":"/reference/kb.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"function kb.test performs kernel-based quadratic distance tests using Gaussian kernel bandwidth parameter h. Depending shape input y function performs tests multivariate normality, non-parametric two-sample tests k-sample tests. quadratic distance two probability distributions \\(F\\) \\(G\\) defined $$d_{K}(F,G)=\\iint K(x,y)d(F-G)(x)d(F-G)(y),$$ \\(G\\) distribution whose goodness fit wish assess \\(K\\) denotes Normal kernel defined $$ K_{{h}}(\\mathbf{s}, \\mathbf{t}) = (2 \\pi)^{-d/2} \\left(\\det{\\mathbf{\\Sigma}_h}\\right)^{-\\frac{1}{2}} \\exp\\left\\{-\\frac{1}{2}(\\mathbf{s} - \\mathbf{t})^\\top \\mathbf{\\Sigma}_h^{-1}(\\mathbf{s} - \\mathbf{t})\\right\\},$$ every \\(\\mathbf{s}, \\mathbf{t} \\\\mathbb{R}^d \\times \\mathbb{R}^d\\), covariance matrix \\(\\mathbf{\\Sigma}_h=h^2 \\) tuning parameter \\(h\\). Test Normality:  Let \\(x_1, x_2, ..., x_n\\) random sample empirical distribution function \\(\\hat F\\). test null hypothesis normality, .e. \\(H_0:F=G=\\mathcal{N}_d(\\mu, \\Sigma)\\). consider U-statistic estimate sample KBQD $$U_{n}=\\frac{1}{n(n-1)}\\sum_{=2}^{n}\\sum_{j=1}^{-1}    K_{cen}(\\mathbf{x}_{}, \\mathbf{x}_{j}),$$ first test statistics $$T_{n}=\\frac{U_{n}}{\\sqrt{Var(U_{n})}},$$ \\(Var(U_n)\\) computed exactly following Lindsay et al.(2014), V-statistic estimate $$V_{n} = \\frac{1}{n}\\sum_{=1}^{n}    \\sum_{j=1}^{n}K_{cen}(\\mathbf{x}_{}, \\mathbf{x}_{j}),$$ \\(K_{cen}\\) denotes Normal kernel \\(K_h\\) parametric centering respect considered normal distribution \\(G = \\mathcal{N}_d(\\mu, \\Sigma)\\). asymptotic distribution V-statistic infinite combination weighted independent chi-squared random variables one degree freedom. cutoff value obtained using Satterthwaite approximation \\(c \\cdot \\chi_{DOF}^2\\), \\(c\\) \\(DOF\\) computed exactly following formulas Lindsay et al.(2014). \\(U\\)-statistic cutoff determined empirically: Generate data considered normal distribution ; Compute test statistics B Monte Carlo(MC) replications; Compute 95th quantile empirical distribution test statistic. k-sample test:  Consider \\(k\\) random samples ..d. observations \\(\\mathbf{x}^{()}_1,    \\mathbf{x}^{()}_{2},\\ldots, \\mathbf{x}^{()}_{n_i} \\sim F_i\\), \\(= 1, \\ldots, k\\). test samples generated unknown distribution, \\(H_0: F_1 = F_2 = \\ldots = F_k\\) versus \\(H_1: F_i \\= F_j\\), \\(1 \\le \\= j \\le k\\).  construct matrix distance \\(\\hat{\\mathbf{D}}\\), -diagonal elements $$\\hat{D}_{ij} = \\frac{1}{n_i n_j} \\sum_{\\ell=1}^{n_i}    \\sum_{r=1}^{n_j}K_{\\bar{F}}(\\mathbf{x}^{()}_\\ell,\\mathbf{x}^{(j)}_r),    \\qquad \\mbox{ }\\= j$$ diagonal $$\\hat{D}_{ii} = \\frac{1}{n_i (n_i -1)} \\sum_{\\ell=1}^{n_i}    \\sum_{r\\= \\ell}^{n_i} K_{\\bar{F}}(\\mathbf{x}^{()}_\\ell,    \\mathbf{x}^{()}_r), \\qquad \\mbox{ }= j,$$ \\(K_{\\bar{F}}\\) denotes Normal kernel \\(K_h\\) centered non-parametrically respect $$\\bar{F} = \\frac{n_1 \\hat{F}_1 + \\ldots + n_k \\hat{F}_k}{n},    \\quad \\mbox{ } n=\\sum_{=1}^k n_i.$$ compute trace statistic $$\\mathrm{trace}(\\hat{\\mathbf{D}}_n) =  \\sum_{=1}^{k}\\hat{D}_{ii}$$ \\(D_n\\), derived considering possible pairwise comparisons k-sample null hypothesis, given $$D_n = (k-1) \\mathrm{trace}(\\hat{\\mathbf{D}}_n)    - 2 \\sum_{=1}^{k}\\sum_{j> }^{k}\\hat{D}_{ij}.$$ compute empirical critical value employing numerical techniques bootstrap, permutation subsampling algorithms: Generate k-tuples, total size \\(n_B\\), pooled sample following one sampling methods; Compute k-sample test statistic; Repeat B times; Select \\(95^{th}\\) quantile obtained values. Two-sample test:  Let \\(x_1, x_2, ..., x_{n_1} \\sim F\\) \\(y_1, y_2, ..., y_{n_2} \\sim G\\) random samples distributions \\(F\\) \\(G\\), respectively. test null hypothesis two samples generated unknown distribution, \\(H_0: F=G\\) vs \\(H_1:F\\=G\\). test statistics coincide \\(k\\)-sample test statistics \\(k=2\\).","code":""},{"path":"/reference/kb.test.html","id":"kernel-centering","dir":"Reference","previous_headings":"","what":"Kernel centering","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"arguments mu_hat Sigma_hat indicate normal model considered normality test, \\(H_0: F = N(\\)mu_hat, Sigma_hat). two-sample \\(k\\)-sample tests, mu_hat Sigma_hat can used parametric centering kernel, case want specify reference distribution, centeringType = \"Param\". default method test normality performed. normal kernel centered respect \\(G \\sim N_d(\\mathbf{\\mu}, \\mathbf{V})\\) can computed $$K_{cen(G)}(\\mathbf{s}, \\mathbf{t}) =  K_{\\mathbf{\\Sigma_h}}(\\mathbf{s}, \\mathbf{t}) -  K_{\\mathbf{\\Sigma_h} + \\mathbf{V}}(\\mathbf{\\mu}, \\mathbf{t}) -  K_{\\mathbf{\\Sigma_h} + \\mathbf{V}}(\\mathbf{s}, \\mathbf{\\mu}) +  K_{\\mathbf{\\Sigma_h} + 2\\mathbf{V}}(\\mathbf{\\mu}, \\mathbf{\\mu}).$$ consider non-parametric centering kernel respect \\(\\bar{F}=(n_1 F_1 + \\ldots n_k F_k)/n\\) \\(n=\\sum_{=1}^k n_i\\), centeringType = \"Nonparam\", two- \\(k\\)-sample tests. Let \\(\\mathbf{z}_1,\\ldots, \\mathbf{z}_n\\) denote pooled sample. \\(s,t \\\\{\\mathbf{z}_1,\\ldots, \\mathbf{z}_n\\}\\), given $$K_{cen(\\bar{F})}(\\mathbf{s},\\mathbf{t}) =    K(\\mathbf{s},\\mathbf{t}) -  \\frac{1}{n}\\sum_{=1}^{n} K(\\mathbf{s},\\mathbf{z}_i) -  \\frac{1}{n}\\sum_{=1}^{n} K(\\mathbf{z}_i,\\mathbf{t}) +  \\frac{1}{n(n-1)}\\sum_{=1}^{n} \\sum_{j \\=}^{n}  K(\\mathbf{z}_i,\\mathbf{z}_j).$$","code":""},{"path":"/reference/kb.test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"two- \\(k\\)-sample tests, slots Vn, H0_Vn CV_Vn empty, computed statistics reported slots Un, H0_Un CV_Un. U-statistic type statistic used estimate population parameter. based idea averaging possible distinct combinations fixed size sample. V-statistic considers possible tuples certain size, just distinct combinations can used contexts unbiasedness required.","code":""},{"path":"/reference/kb.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"Markatou, M. Saraceno, G. (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.”  https://doi.org/10.48550/arXiv.2407.16374 Lindsay, B.G., Markatou, M. Ray, S. (2014) \"Kernels, Degrees Freedom, Power Properties Quadratic Distance Goodness--Fit Tests\", Journal American Statistical Association, 109:505, 395-410, DOI: 10.1080/01621459.2013.836972","code":""},{"path":[]},{"path":"/reference/kb.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel-based quadratic distance (KBQD) Goodness-of-Fit tests — kb.test","text":"","code":"# create a kb.test object x <- matrix(rnorm(100),ncol=2) y <- matrix(rnorm(100),ncol=2)  # Normality test my_test <- kb.test(x, h=0.5) my_test #>  #>  Kernel-based quadratic distance Normality test  #> \t\tU-statistic\tV-statistic #> ------------------------------------------------ #> Test Statistic:\t 0.3027069 \t 0.6189598  #> Critical Value:\t 1.262023 \t 6.071062  #> H0 is rejected:\t FALSE \t\t FALSE  #> Selected tuning parameter h:  0.5  #>   # Two-sample test my_test <- kb.test(x,y,h=0.5, method=\"subsampling\",b=0.9,                      centeringType = \"Nonparam\") my_test #>  #>  Kernel-based quadratic distance two-sample test  #> U-statistic\t Dn \t\t Trace  #> ------------------------------------------------ #> Test Statistic:\t 0.239788 \t 0.2819997  #> Critical Value:\t 0.9875162 \t 1.162661  #> H0 is rejected:\t FALSE \t\t FALSE  #> CV method:  subsampling  #> Selected tuning parameter h:  0.5  #>   # k-sample test z <- matrix(rnorm(100,2),ncol=2) dat <- rbind(x,y,z) group <- rep(c(1,2,3),each=50) my_test <- kb.test(x=dat,y=group,h=0.5, method=\"subsampling\",b=0.9) my_test #>  #>  Kernel-based quadratic distance k-sample test  #> U-statistic\t Dn \t\t Trace  #> ------------------------------------------------ #> Test Statistic:\t 7.325505 \t 11.45482  #> Critical Value:\t 0.7402039 \t 1.158313  #> H0 is rejected:\t TRUE \t\t TRUE  #> CV method:  subsampling  #> Selected tuning parameter h:  0.5  #>"},{"path":"/reference/normal_CV.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the critical value for the KBQD tests for multivariate Normality — normal_CV","title":"Compute the critical value for the KBQD tests for multivariate Normality — normal_CV","text":"function computes empirical critical value Normality test based KBQD tests using centered Gaussian kernel.","code":""},{"path":"/reference/normal_CV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the critical value for the KBQD tests for multivariate Normality — normal_CV","text":"","code":"normal_CV(d, size, h, mu_hat, Sigma_hat, B = 150, Quantile = 0.95)"},{"path":"/reference/normal_CV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the critical value for the KBQD tests for multivariate Normality — normal_CV","text":"d dimension generated samples. size number observations generated. h concentration parameter Gaussian kernel. mu_hat Mean vector reference distribution. Sigma_hat Covariance matrix reference distribution. B number replications. Quantile quantile distribution use select critical value","code":""},{"path":"/reference/normal_CV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the critical value for the KBQD tests for multivariate Normality — normal_CV","text":"critical value specified dimension, size level.","code":""},{"path":"/reference/normal_CV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the critical value for the KBQD tests for multivariate Normality — normal_CV","text":"replication, sample d-dimensional Normal distribution mean vector mu_hat covariance matrix Sigma_hat generated KBQD test U-statistic Normality computed. B iterations, critical value selected Quantile empirical distribution computed test statistics.","code":""},{"path":"/reference/pk.test-class.html","id":null,"dir":"Reference","previous_headings":"","what":"An S4 class for Poisson kernel-based quadratic distance tests. — pk.test-class","title":"An S4 class for Poisson kernel-based quadratic distance tests. — pk.test-class","text":"class represent results Poisson kernel-based quadratic distance tests Uniformity sphere.","code":""},{"path":"/reference/pk.test-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"An S4 class for Poisson kernel-based quadratic distance tests. — pk.test-class","text":"method Description test. x Matrix data Un value U-statistic. CV_Un critical value Un computed replications. H0_Un logical value indicating whether null hypothesis rejected according Un. Vn value V-statistic. CV_Vn critical value Vn computed following asymptotic distribution. H0_Vn logical value indicating whether null hypothesis rejected according Vn. rho concentration parameter Poisson kernel. B Number replications. var_Un exact variance kernel-based U-statistic.","code":""},{"path":[]},{"path":"/reference/pk.test-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"An S4 class for Poisson kernel-based quadratic distance tests. — pk.test-class","text":"","code":"# create a pk.test object d=3 size=100 x_sp <- sample_hypersphere(d, n_points=size) pk.test(x_sp,rho=0.8) #>  #>  Poisson Kernel-based quadratic distance test of  #>                         Uniformity on the Sphere  #> Selected consentration parameter rho:  0.8  #>  #> U-statistic: #>  #> H0 is rejected:  FALSE  #> Statistic Un:  1.082258  #> Critical value:  1.44412  #>  #> V-statistic: #>  #> H0 is rejected:  FALSE  #> Statistic Vn:  49.19885  #> Critical value:  52.23077  #>"},{"path":"/reference/pk.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","title":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","text":"function performs kernel-based quadratic distance goodness--fit tests Uniformity spherical data x using Poisson kernel concentration parameter rho.  Poisson kernel-based test uniformity exhibits excellent results especially case multimodal distributions, shown example Uniformity test Sphere vignette.","code":""},{"path":"/reference/pk.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","text":"","code":"pk.test(x, rho, B = 300, Quantile = 0.95)  # S4 method for class 'ANY' pk.test(x, rho, B = 300, Quantile = 0.95)  # S4 method for class 'pk.test' show(object)"},{"path":"/reference/pk.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","text":"x numeric d-dim matrix data points Sphere S^(d-1). rho Concentration parameter Poisson kernel function. B Number Monte Carlo iterations critical value estimation Un (default: 300). Quantile quantile use critical value estimation, 0.95 default value. object Object class pk.test","code":""},{"path":"/reference/pk.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","text":"S4 object class pk.test containing results Poisson kernel-based tests. object contains following slots: method: Description test performed. x Data matrix. Un value U-statistic. CV_Un empirical critical value Un. H0_Vn logical value indicating whether null hypothesis rejected according Un. Vn value V-statistic Vn. CV_Vn critical value Vn computed following asymptotic distribution. H0_Vn logical value indicating whether null hypothesis rejected according Vn. rho value concentration parameter used Poisson kernel function. B Number replications critical value U-statistic Un.","code":""},{"path":"/reference/pk.test.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","text":"Let \\(x_1, x_2, ..., x_n\\) random sample empirical distribution function \\(\\hat F\\). test null hypothesis uniformity \\(d\\)-dimensional sphere, .e. \\(H_0:F=G\\), \\(G\\) uniform distribution \\(d\\)-dimensional sphere \\(\\mathcal{S}^{d-1}\\). compute U-statistic estimate sample KBQD (Kernel-Based Quadratic Distance) $$U_{n}=\\frac{1}{n(n-1)}\\sum_{=2}^{n}\\sum_{j=1}^{-1}K_{cen} (\\mathbf{x}_{}, \\mathbf{x}_{j}),$$ first test statistic given $$T_{n}=\\frac{U_{n}}{\\sqrt{Var(U_{n})}},$$ $$Var(U_{n})= \\frac{2}{n(n-1)} \\left[\\frac{1+\\rho^{2}}{(1-\\rho^{2})^{d-1}}-1\\right],$$ V-statistic estimate KBQD $$V_{n} = \\frac{1}{n}\\sum_{=1}^{n}\\sum_{j=1}^{n}K_{cen} (\\mathbf{x}_{}, \\mathbf{x}_{j}),$$ \\(K_{cen}\\) denotes Poisson kernel \\(K_\\rho\\) centered respect uniform distribution \\(d\\)-dimensional sphere, $$K_{cen}(\\mathbf{u}, \\mathbf{v}) = K_\\rho(\\mathbf{u}, \\mathbf{v}) -1$$ $$K_\\rho(\\mathbf{u}, \\mathbf{v}) = \\frac{1-\\rho^{2}}{\\left(1+\\rho^{2}- 2\\rho (\\mathbf{u}\\cdot \\mathbf{v})\\right)^{d/2}},$$ every \\(\\mathbf{u}, \\mathbf{v} \\\\mathcal{S}^{d-1} \\times \\mathcal{S}^{d-1}\\). asymptotic distribution V-statistic infinite combination weighted independent chi-squared random variables one degree freedom. cutoff value obtained using Satterthwaite approximation \\(c \\cdot \\chi_{DOF}^2\\), $$c=\\frac{(1+\\rho^{2})- (1-\\rho^{2})^{d-1}}{(1+\\rho)^{d}-(1-\\rho^{2})^{d-1}}$$ $$DOF(K_{cen} )=\\left(\\frac{1+\\rho}{1-\\rho} \\right)^{d-1}\\left\\{ \\frac{\\left(1+\\rho-(1-\\rho)^{d-1} \\right )^{2}} {1+\\rho^{2}-(1-\\rho^{2})^{d-1}}\\right \\}.$$. \\(U\\)-statistic cutoff determined empirically: Generate data Uniform distribution d-dimensional sphere; Compute test statistics B Monte Carlo(MC) replications; Compute 95th quantile empirical distribution test statistic.","code":""},{"path":"/reference/pk.test.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","text":"U-statistic type statistic used estimate population parameter. based idea averaging possible distinct combinations fixed size sample. V-statistic considers possible tuples certain size, just distinct combinations can used contexts unbiasedness required.","code":""},{"path":"/reference/pk.test.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","text":"Ding, Y., Markatou, M. Saraceno, G. (2023). “Poisson Kernel-Based Tests Uniformity d-Dimensional Sphere.” Statistica Sinica. doi:10.5705/ss.202022.0347","code":""},{"path":[]},{"path":"/reference/pk.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson kernel-based quadratic distance test of Uniformity on the sphere — pk.test","text":"","code":"# create a pk.test object x_sp <- sample_hypersphere(3, n_points=100) unif_test <- pk.test(x_sp,rho=0.8) unif_test #>  #>  Poisson Kernel-based quadratic distance test of  #>                         Uniformity on the Sphere  #> Selected consentration parameter rho:  0.8  #>  #> U-statistic: #>  #> H0 is rejected:  FALSE  #> Statistic Un:  0.4735996  #> Critical value:  1.543174  #>  #> V-statistic: #>  #> H0 is rejected:  FALSE  #> Statistic Vn:  46.27503  #> Critical value:  52.23077  #>"},{"path":"/reference/pkbc-class.html","id":null,"dir":"Reference","previous_headings":"","what":"A S4 class for the clustering algorithm on the sphere based on Poisson kernel-based distributions. — pkbc-class","title":"A S4 class for the clustering algorithm on the sphere based on Poisson kernel-based distributions. — pkbc-class","text":"class represent results Poisson kernel-based clustering procedure spherical observations.","code":""},{"path":"/reference/pkbc-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"A S4 class for the clustering algorithm on the sphere based on Poisson kernel-based distributions. — pkbc-class","text":"res_k List objects results clustering algorithm value possible number clusters considered. input List input data","code":""},{"path":[]},{"path":"/reference/pkbc-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A S4 class for the clustering algorithm on the sphere based on Poisson kernel-based distributions. — pkbc-class","text":"","code":"data(\"wireless\") res <- pkbc(as.matrix(wireless[,-8]),4)"},{"path":"/reference/pkbc.html","id":null,"dir":"Reference","previous_headings":"","what":"Poisson kernel-based clustering on the sphere — pkbc","title":"Poisson kernel-based clustering on the sphere — pkbc","text":"function pkbc() performs Poisson kernel-based clustering algorithm sphere proposed Golzy Markatou (2020). proposed algorithm based mixture, \\(M\\) components, Poisson kernel-based densities hypersphere \\(\\mathcal{S}^{d-1}\\) given $$f(x|\\Theta) = \\sum_{j=1}^M \\alpha_j f_j(x|\\rho_j, \\mu_j)$$ \\(\\alpha_j\\)'s mixing proportions \\(f_j(x|\\rho_j, \\mu_j)\\)'s denote probability density function \\(d\\)-variate Poisson kernel-based density given $$f(\\mathbf{x}|\\rho, \\mathbf{\\mu}) = \\frac{1-\\rho^2}{\\omega_d ||\\mathbf{x} - \\rho \\mathbf{\\mu}||^d}.$$ parameters \\(\\alpha_j, \\mu_j, \\rho_j\\) estimated iterative reweighted EM algorithm.  proposed clustering algorithm exhibits excellent results (1) clusters well separated; (2) data points fairly well concentrated around vectors \\(\\mu_j\\) cluster; (3) percentage noise data increases.","code":""},{"path":"/reference/pkbc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Poisson kernel-based clustering on the sphere — pkbc","text":"","code":"pkbc(   dat,   nClust = NULL,   maxIter = 300,   stoppingRule = \"loglik\",   initMethod = \"sampleData\",   numInit = 10 )  # S4 method for class 'ANY' pkbc(   dat,   nClust = NULL,   maxIter = 300,   stoppingRule = \"loglik\",   initMethod = \"sampleData\",   numInit = 10 )  # S4 method for class 'pkbc' show(object)"},{"path":"/reference/pkbc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Poisson kernel-based clustering on the sphere — pkbc","text":"dat Data matrix data.frame data points sphere clustered. observations dat normalized dividing length vector ensure lie \\(d\\)-dimensional sphere. Note \\(d > 1\\). nClust Number clusters. can single value numeric vector. maxIter maximum number iterations run terminated. stoppingRule String describing stopping rule used within run. Currently must either 'max', 'membership', 'loglik'. initMethod String describing initialization method used. Currently must 'sampleData'. numInit Number initialization. object Object class pkbc","code":""},{"path":"/reference/pkbc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Poisson kernel-based clustering on the sphere — pkbc","text":"S4 object class pkbc containing results clustering procedure based Poisson kernel-based distributions. object contains following slots: res_k: List results Poisson kernel-based clustering algorithm value number clusters specified nClust. object list contains: postProbs Posterior probabilities observation indicated clusters. LogLik Maximum value log-likelihood function wcss Values within-cluster sum squares computed Euclidean distance cosine similarity, respectively. params List estimated parameters mixture model mu estimated centroids rho estimated concentration parameters rho alpha estimated mixing proportions finalMemb Vector final memberships runInfo List information EM algorithm iterations lokLikVec vector log-likelihood values numIterPerRun number E-M iterations per run input: List input information.","code":""},{"path":"/reference/pkbc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Poisson kernel-based clustering on the sphere — pkbc","text":"set concentration parameters equal 0.5 mixing proportions equal.  initialization method 'sampleData' indicates observation points randomly chosen initializers centroids \\(\\mu_j\\). random starts strategy chance obtaining initial representatives underlying clusters, clustering performed numInit times random start highest likelihood chosen final estimate parameters. possible stoppingRule iteration : 'loglik' run algorithm change log-likelihood one iteration next less given threshold (1e-7) 'membership' run algorithm membership unchanged points one iteration next 'max' reach maximum number iterations maxIter obtained estimates used assigning final memberships, identifying nClust clusters, according following rule $$P(x_i, \\Theta) = \\arg\\max_{j \\\\{1, \\ldots, k\\}} \\{ \\frac{\\alpha_j f_j(x_i|\\mu_j, \\rho_j)}{f(x_i, \\Theta)}\\}.$$ number clusters nClust must provided input clustering algorithm.","code":""},{"path":"/reference/pkbc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Poisson kernel-based clustering on the sphere — pkbc","text":"clustering algorithm tailored data points sphere \\(\\mathcal{S}^{d-1}\\), can also performed spherically transformed observations, .e. data points Euclidean space \\(\\mathbb{R}^d\\) normalized lie corresponding \\(d\\)-dimensional sphere \\(\\mathcal{S}^{d-1}\\).","code":""},{"path":"/reference/pkbc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Poisson kernel-based clustering on the sphere — pkbc","text":"Golzy, M. Markatou, M. (2020) Poisson Kernel-Based Clustering Sphere: Convergence Properties, Identifiability, Method Sampling, Journal Computational Graphical Statistics, 29:4, 758-770, DOI: 10.1080/10618600.2020.1740713.","code":""},{"path":[]},{"path":"/reference/pkbc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Poisson kernel-based clustering on the sphere — pkbc","text":"","code":"#We generate three samples of 100 observations from 3-dimensional #Poisson kernel-based densities with rho=0.8 and different mean directions size<-100 groups<-c(rep(1, size), rep(2, size),rep(3,size)) rho<-0.8 set.seed(081423) data1<-rpkb(size, c(1,0,0),rho) data2<-rpkb(size, c(0,1,0),rho) data3<-rpkb(size, c(0,0,1),rho) dat<-rbind(data1$x,data2$x, data3$x)  #Perform the clustering algorithm with number of clusters k=3. pkbd<- pkbc(dat=dat, nClust=3) show(pkbd) #> Poisson Kernel-Based Clustering on the Sphere (pkbc) Object #> ------------------------------------------------------------ #>  #> Available components: #> Input Parameters: #> [1] \"dat\"          \"nClust\"       \"maxIter\"      \"stoppingRule\" \"initMethod\"   #> [6] \"numInit\"      #>  #>  #> Considered possible number of clusters:  3  #>  #> Available components for each value of number of clusters:  #> [1] \"postProbs\" \"LogLik\"    \"wcss\"      \"params\"    \"finalMemb\" \"runInfo\""},{"path":"/reference/pkbc_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation of Poisson kernel-based clustering results — pkbc_validation","title":"Validation of Poisson kernel-based clustering results — pkbc_validation","text":"Method objects class pkbc computes evaluation measures clustering results. following evaluation measures computed: -Group Proportion (Kapp Tibshirani (2007)). true label provided, ARI, Average Silhouette Width (Rousseeuw (1987)), Macro-Precision Macro-Recall computed.","code":""},{"path":"/reference/pkbc_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation of Poisson kernel-based clustering results — pkbc_validation","text":"","code":"pkbc_validation(object, true_label = NULL)"},{"path":"/reference/pkbc_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation of Poisson kernel-based clustering results — pkbc_validation","text":"object Object class pkbc true_label factor vector true membership clusters (available). must length final memberships.","code":""},{"path":"/reference/pkbc_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation of Poisson kernel-based clustering results — pkbc_validation","text":"List following components: metrics Table computed evaluation measures value number clusters pkbc object. number cluster indicated column name. IGP List -group proportions value number clusters specified.","code":""},{"path":"/reference/pkbc_validation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validation of Poisson kernel-based clustering results — pkbc_validation","text":"IGP statistical measure quantifies proportion observations within group belong predefined category class. often used assess homogeneity group evaluating many members share label. higher IGP indicates group cohesive, lower proportion suggests greater diversity misclassification within group (Kapp Tibshirani 2007). Adjusted Rand Index (ARI) statistical measure used data clustering analysis. quantifies similarity two partitions dataset comparing assignments data points clusters. ARI value ranges 0 1, value 1 indicates perfect match partitions value close 0 indicates random assignment data points clusters. cluster can represented -called silhouette based comparison tightness separation. average silhouette width provides evaluation clustering validity, might used select appropriate number clusters (Rousseeuw 1987). Macro Precision metric used multi-class classification calculates precision class independently takes average values. Precision class defined proportion true positive predictions predictions made class. Macro Recall similar Macro Precision focuses recall. Recall class proportion true positive predictions actual instances class. Macro Recall average recall values computed class.","code":""},{"path":"/reference/pkbc_validation.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Validation of Poisson kernel-based clustering results — pkbc_validation","text":"Note Macro Precision Macro Recall depend assigned labels, ARI measures similarity partition label switching. required packages (mclust ARI, clusterRepro IGP, cluster ASW) installed, function display message asking user install missing package(s).","code":""},{"path":"/reference/pkbc_validation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Validation of Poisson kernel-based clustering results — pkbc_validation","text":"Kapp, .V. Tibshirani, R. (2007) \"clusters found one dataset present another dataset?\", Biostatistics, 8(1), 9–31, https://doi.org/10.1093/biostatistics/kxj029 Rousseeuw, P.J. (1987) Silhouettes: graphical aid interpretation validation cluster analysis. Journal Computational Applied Mathematics, 20, 53–65.","code":""},{"path":[]},{"path":"/reference/pkbc_validation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation of Poisson kernel-based clustering results — pkbc_validation","text":"","code":"#We generate three samples of 100 observations from 3-dimensional #Poisson kernel-based densities with rho=0.8 and different mean directions  size<-20 groups<-c(rep(1, size), rep(2, size),rep(3,size)) rho<-0.8 set.seed(081423) data1<-rpkb(size, c(1,0,0),rho,method='rejvmf') data2<-rpkb(size, c(0,1,0),rho,method='rejvmf') data3<-rpkb(size, c(1,0,0),rho,method='rejvmf') data<-rbind(data1$x,data2$x, data3$x)  #Perform the clustering algorithm pkbc_res<- pkbc(data, 3) pkbc_validation(pkbc_res) #> $metrics #>              3 #> ASW 0.03602451 #>  #> $IGP #> $IGP[[1]] #> NULL #>  #> $IGP[[2]] #> NULL #>  #> $IGP[[3]] #> [1] 0.952381 1.000000 1.000000 #>  #>"},{"path":"/reference/plot.pkbc.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting method for Poisson kernel-based clustering — plot.pkbc","title":"Plotting method for Poisson kernel-based clustering — plot.pkbc","text":"Plots pkbc object.","code":""},{"path":"/reference/plot.pkbc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting method for Poisson kernel-based clustering — plot.pkbc","text":"","code":"# S4 method for class 'pkbc,ANY' plot(x, k = NULL, true_label = NULL, pca_res = FALSE, ...)"},{"path":"/reference/plot.pkbc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting method for Poisson kernel-based clustering — plot.pkbc","text":"x Object class pkbc k number considered clusters. provided scatter plot displayed value number clusters present x object true_label factor vector true membership clusters (available). must length final memberships. pca_res Logical. TRUE results PCALocantore also reported (dimension greater 3). ... Additional arguments can passed plot function","code":""},{"path":"/reference/plot.pkbc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting method for Poisson kernel-based clustering — plot.pkbc","text":"scatter-plot(s) elbow plot.","code":""},{"path":"/reference/plot.pkbc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting method for Poisson kernel-based clustering — plot.pkbc","text":"scatterplot: dimension equal 2 3, points displayed circle sphere, respectively. dimension greater 3, spherical Principal Component procedure proposed Locantore et al. (1999), applied dimensionality reduction first three principal components normalized displayed sphere. d > 3, complete results PcaLocantore function (package rrcov) returned pca_res=TRUE. elbow plot: within cluster sum squares (wcss) computed using Euclidean distance (left) cosine similarity (right).","code":""},{"path":"/reference/plot.pkbc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Plotting method for Poisson kernel-based clustering — plot.pkbc","text":"elbow plot commonly used graphical method choosing appropriate number clusters. Specifically, plotting wcss versus number clusters, suggested number clusters correspond point plotted line greatest change slope, showing elbow.","code":""},{"path":"/reference/plot.pkbc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plotting method for Poisson kernel-based clustering — plot.pkbc","text":"Locantore, N., Marron, J.S., Simpson, D.G. et al. (1999) \"Robust principal component analysis functional data.\" Test 8, 1–73. https://doi.org/10.1007/BF02595862","code":""},{"path":[]},{"path":"/reference/plot.pkbc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting method for Poisson kernel-based clustering — plot.pkbc","text":"","code":"dat<-matrix(rnorm(300),ncol=3) pkbc_res<- pkbc(dat, 3) plot(pkbc_res, 3) #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic? #> `geom_line()`: Each group consists of only one observation. #> ℹ Do you need to adjust the group aesthetic?"},{"path":"/reference/poisson_CV.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the critical value for the Poisson KBQD tests for Uniformity — poisson_CV","title":"Compute the critical value for the Poisson KBQD tests for Uniformity — poisson_CV","text":"function computes empirical critical value U-statistics testing uniformity sphere based centered poisson kernel.","code":""},{"path":"/reference/poisson_CV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the critical value for the Poisson KBQD tests for Uniformity — poisson_CV","text":"","code":"poisson_CV(d, size, rho, B, Quantile)"},{"path":"/reference/poisson_CV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the critical value for the Poisson KBQD tests for Uniformity — poisson_CV","text":"d dimension generated samples. size number observations generated. rho concentration parameter Poisson kernel. B number replications. Quantile quantile distribution use select critical value.","code":""},{"path":"/reference/poisson_CV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the critical value for the Poisson KBQD tests for Uniformity — poisson_CV","text":"critical value specified dimension, size level.","code":""},{"path":"/reference/poisson_CV.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the critical value for the Poisson KBQD tests for Uniformity — poisson_CV","text":"replication, sample d-dimensional observations uniform distribution Sphere generated Poisson kernel-based U-statistic computed. B iterations, critical value selected Quantile empirical distribution computed test statistics.","code":""},{"path":"/reference/poisson_CV.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the critical value for the Poisson KBQD tests for Uniformity — poisson_CV","text":"Ding Yuxin, Markatou Marianthi, Saraceno Giovanni (2023). “Poisson Kernel-Based Tests Uniformity d-Dimensional Sphere.” Statistica Sinica. doi: doi:10.5705/ss.202022.0347","code":""},{"path":"/reference/predict.pkbc.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster spherical observations using a mixture of Poisson kernel-based densities — predict.pkbc","title":"Cluster spherical observations using a mixture of Poisson kernel-based densities — predict.pkbc","text":"Obtain predictions membership spherical observations based mixture Poisson kernel-based densities estimated pkbc","code":""},{"path":"/reference/predict.pkbc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster spherical observations using a mixture of Poisson kernel-based densities — predict.pkbc","text":"","code":"# S4 method for class 'pkbc' predict(object, k, newdata = NULL)"},{"path":"/reference/predict.pkbc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster spherical observations using a mixture of Poisson kernel-based densities — predict.pkbc","text":"object Object class pkbc k Number clusters used. newdata data.frame matrix data. missing clustering data obtained pkbc object classified.","code":""},{"path":"/reference/predict.pkbc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster spherical observations using a mixture of Poisson kernel-based densities — predict.pkbc","text":"Returns list following components Memb: vector predicted memberships newdata Probs: matrix entry (,j) denotes probability observation belongs k-th cluster.","code":""},{"path":[]},{"path":"/reference/predict.pkbc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cluster spherical observations using a mixture of Poisson kernel-based densities — predict.pkbc","text":"","code":"# generate data dat <- rbind(matrix(rnorm(100),ncol=2),matrix(rnorm(100,5),ncol=2)) res <- pkbc(dat,2)  # extract membership of dat predict(res,k=2) #>   [1] 2 1 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 1 1 1 2 1 2 2 2 2 #>  [38] 2 2 2 1 2 1 1 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 #>  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 # predict membership of new data newdat <- rbind(matrix(rnorm(10),ncol=2),matrix(rnorm(10,5),ncol=2)) predict(res, k=2, newdat) #> $Memb #>  [1] 1 2 2 2 2 1 1 1 1 1 #>  #> $Probs #>             [,1]       [,2] #>  [1,] 0.79214887 0.20785113 #>  [2,] 0.09155787 0.90844213 #>  [3,] 0.10633003 0.89366997 #>  [4,] 0.05939363 0.94060637 #>  [5,] 0.11831316 0.88168684 #>  [6,] 0.95577420 0.04422580 #>  [7,] 0.97150510 0.02849490 #>  [8,] 0.96104005 0.03895995 #>  [9,] 0.84807303 0.15192697 #> [10,] 0.95487786 0.04512214 #>"},{"path":"/reference/sample_hypersphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random sample from the hypersphere — sample_hypersphere","title":"Generate random sample from the hypersphere — sample_hypersphere","text":"Generate random sample uniform distribution hypersphere.","code":""},{"path":"/reference/sample_hypersphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random sample from the hypersphere — sample_hypersphere","text":"","code":"sample_hypersphere(d, n_points = 1)"},{"path":"/reference/sample_hypersphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random sample from the hypersphere — sample_hypersphere","text":"d Number dimensions. n_points Number sampled observations.","code":""},{"path":"/reference/sample_hypersphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random sample from the hypersphere — sample_hypersphere","text":"Data matrix sampled observations.","code":""},{"path":"/reference/sample_hypersphere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random sample from the hypersphere — sample_hypersphere","text":"","code":"x_sp <- sample_hypersphere(3,100)"},{"path":"/reference/select_h.html","id":null,"dir":"Reference","previous_headings":"","what":"Select the value of the kernel tuning parameter — select_h","title":"Select the value of the kernel tuning parameter — select_h","text":"function computes kernel bandwidth Gaussian kernel normality, two-sample k-sample kernel-based quadratic distance (KBQD) tests.","code":""},{"path":"/reference/select_h.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select the value of the kernel tuning parameter — select_h","text":"","code":"select_h(   x,   y = NULL,   alternative = NULL,   method = \"subsampling\",   b = 0.8,   B = 100,   delta_dim = 1,   delta = NULL,   h_values = NULL,   Nrep = 50,   n_cores = 2,   Quantile = 0.95,   power.plot = TRUE )"},{"path":"/reference/select_h.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select the value of the kernel tuning parameter — select_h","text":"x Data set observations X. y Numeric matrix vector data values. Depending input y, selection h performed corresponding test. y = NULL, function performs tests normality x. y data matrix, dimensions x, function performs two-sample test x y. y numeric factor vector, indicating group memberships observation, function performs k-sample test. alternative Family alternative chosen selecting h, \"location\", \"scale\" \"skewness\". method method used critical value estimation (\"subsampling\", \"bootstrap\", \"permutation\"). b size subsamples used subsampling algorithm . B number iterations use critical value estimation, B = 150 default. delta_dim Vector coefficient alternative respect dimension delta Vector parameter values indicating chosen alternatives h_values Values tuning parameter used selection Nrep Number bootstrap/permutation/subsampling replications. n_cores Number cores used parallel h selection algorithm. provided, function detect available cores. Quantile quantile use critical value estimation, 0.95 default value. power.plot Logical. TRUE, displayed plot power values h_values delta.","code":""},{"path":"/reference/select_h.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select the value of the kernel tuning parameter — select_h","text":"list following attributes: h_sel selected value tuning parameter h; power matrix power values computed considered values delta h_values; power.plot power plots (power.plot TRUE).","code":""},{"path":"/reference/select_h.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select the value of the kernel tuning parameter — select_h","text":"function performs selection optimal value tuning parameter \\(h\\) normal kernel function, normality test, two-sample k-sample KBQD tests. performs small simulation study, generating samples according family alternative specified, chosen values h_values delta. consider target alternatives \\(F_\\delta(\\hat{\\mathbf{\\mu}}, \\hat{\\mathbf{\\Sigma}}, \\hat{\\mathbf{\\lambda}})\\), \\(\\hat{\\mathbf{\\mu}}, \\hat{\\mathbf{\\Sigma}}\\) \\(\\hat{\\mathbf{\\lambda}}\\) indicate location, covariance skewness parameter estimates pooled sample. Compute estimates mean \\(\\hat{\\mu}\\), covariance matrix \\(\\hat{\\Sigma}\\) skewness \\(\\hat{\\lambda}\\) pooled sample. Choose family alternatives \\(F_\\delta = F_\\delta(\\hat{\\mu} ,\\hat{\\Sigma}, \\hat{\\lambda})\\). value \\(\\delta\\) \\(h\\): Generate \\(\\mathbf{X}_1,\\ldots,\\mathbf{X}_{k-1}  \\sim F_0\\), \\(\\delta=0\\); Generate \\(\\mathbf{X}_k \\sim F_\\delta\\); Compute \\(k\\)-sample test statistic \\(\\mathbf{X}_1, \\mathbf{X}_2, \\ldots, \\mathbf{X}_k\\) kernel parameter \\(h\\); Compute power test. greater 0.5, select \\(h\\) optimal value. optimal value selected, choose \\(h\\) corresponds maximum power. available alternative location alternatives, \\(F_\\delta = SN_d(\\hat{\\mu} + \\delta,\\hat{\\Sigma}, \\hat{\\lambda})\\),\\(\\delta = 0.2, 0.3, 0.4\\); scale alternatives, \\(F_\\delta = SN_d(\\hat{\\mu} ,\\hat{\\Sigma}*\\delta, \\hat{\\lambda})\\), \\(\\delta = 0.1, 0.3, 0.5\\); skewness alternatives, \\(F_\\delta = SN_d(\\hat{\\mu} ,\\hat{\\Sigma}, \\hat{\\lambda} + \\delta)\\), \\(\\delta = 0.2, 0.3, 0.6\\).  values \\(h = 0.6, 1, 1.4, 1.8, 2.2\\) \\(N=50\\) set default values.  function select_h() allows user set values \\(\\delta\\) \\(h\\) extensive grid search. suggest set extensive grid search computational resources permit.","code":""},{"path":"/reference/select_h.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Select the value of the kernel tuning parameter — select_h","text":"Please aware select_h() function may take significant amount time run, especially larger datasets using larger number parameters h_values delta. Consider applying function large complex data.","code":""},{"path":"/reference/select_h.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Select the value of the kernel tuning parameter — select_h","text":"Markatou, M. Saraceno, G. (2024). “Unified Framework Multivariate Two- k-Sample Kernel-based Quadratic Distance Goodness--Fit Tests.”  https://doi.org/10.48550/arXiv.2407.16374 Saraceno, G., Markatou, M., Mukhopadhyay, R. Golzy, M. (2024). Goodness--Fit Clustering Spherical Data: QuadratiK package R Python.  https://arxiv.org/abs/2402.02290.","code":""},{"path":[]},{"path":"/reference/select_h.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select the value of the kernel tuning parameter — select_h","text":"","code":"# Select the value of h using the mid-power algorithm # \\donttest{ x <- matrix(rnorm(100),ncol=2) y <- matrix(rnorm(100),ncol=2) h_sel <- select_h(x,y,\"skewness\")  h_sel #> $h_sel #> [1] 2 #>  #> $power #>      h delta power #> 1  0.4   0.2  0.00 #> 2  0.8   0.2  0.10 #> 3  1.2   0.2  0.08 #> 4  1.6   0.2  0.14 #> 5  2.0   0.2  0.14 #> 6  2.4   0.2  0.12 #> 7  2.8   0.2  0.14 #> 8  3.2   0.2  0.08 #> 9  0.4   0.3  0.06 #> 10 0.8   0.3  0.06 #> 11 1.2   0.3  0.16 #> 12 1.6   0.3  0.18 #> 13 2.0   0.3  0.16 #> 14 2.4   0.3  0.18 #> 15 2.8   0.3  0.18 #> 16 3.2   0.3  0.10 #> 17 0.4   0.6  0.12 #> 18 0.8   0.6  0.26 #> 19 1.2   0.6  0.38 #> 20 1.6   0.6  0.46 #> 21 2.0   0.6  0.56 #> 22 2.4   0.6  0.34 #> 23 2.8   0.6  0.30 #> 24 3.2   0.6  0.40 #>  #> $power.plot  #>  # }"},{"path":"/reference/stats_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Descriptive statistics for the clusters identified by the Poisson kernel-based clustering. — stats_clusters","title":"Descriptive statistics for the clusters identified by the Poisson kernel-based clustering. — stats_clusters","text":"Method objects class pkbc computes descriptive variable respect detected groups. Method objects class pkbc computes descriptive statistics variable respect detected groups.","code":""},{"path":"/reference/stats_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Descriptive statistics for the clusters identified by the Poisson kernel-based clustering. — stats_clusters","text":"","code":"stats_clusters(object, ...)  # S4 method for class 'pkbc' stats_clusters(object, k)"},{"path":"/reference/stats_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Descriptive statistics for the clusters identified by the Poisson kernel-based clustering. — stats_clusters","text":"object Object class pkbc. ... possible additional inputs k Number clusters used.","code":""},{"path":"/reference/stats_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Descriptive statistics for the clusters identified by the Poisson kernel-based clustering. — stats_clusters","text":"List computed descriptive statistics dimension.","code":""},{"path":"/reference/stats_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Descriptive statistics for the clusters identified by the Poisson kernel-based clustering. — stats_clusters","text":"function computes mean, standard deviation, median, inter-quantile range, minimum maximum variable data set given final membership assigned clustering algorithm.","code":""},{"path":[]},{"path":"/reference/stats_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Descriptive statistics for the clusters identified by the Poisson kernel-based clustering. — stats_clusters","text":"","code":"#We generate three samples of 100 observations from 3-dimensional #Poisson kernel-based densities with rho=0.8 and different mean directions dat<-matrix(rnorm(300),ncol=3)  #Perform the clustering algorithm pkbc_res<- pkbc(dat, 3) stats_clusters(pkbc_res, 3) #> [[1]] #>            Group 1    Group 2     Group 3     Overall #> mean   -0.53360502  0.2185515 0.007405148  0.04344402 #> sd      0.34258917  0.5269849          NA  0.58084656 #> median -0.55364837  0.2151044 0.007405148  0.07318718 #> IQR     0.53206272  0.9127813 0.000000000  0.93759633 #> min    -0.99487956 -0.9642025 0.007405148 -0.99487956 #> max     0.07466077  0.9873736 0.007405148  0.98737364 #>  #> [[2]] #>           Group 1    Group 2   Group 3    Overall #> mean    0.1608868 -0.1893987 0.8593866 -0.0983452 #> sd      0.3330494  0.6198886        NA  0.5890662 #> median  0.1009154 -0.3009186 0.8593866 -0.1183249 #> IQR     0.5036676  0.9810143 0.0000000  1.0017535 #> min    -0.4511650 -0.9888086 0.8593866 -0.9888086 #> max     0.7908170  0.9928995 0.8593866  0.9928995 #>  #> [[3]] #>            Group 1     Group 2    Group 3    Overall #> mean   -0.62082799  0.09072061 -0.5112727 -0.0789555 #> sd      0.29913303  0.50819936         NA  0.5547490 #> median -0.65141402  0.08038502 -0.5112727 -0.1405382 #> IQR     0.47845791  0.77660008  0.0000000  0.8655454 #> min    -0.95185464 -0.99561644 -0.5112727 -0.9956164 #> max    -0.09110684  0.96905979 -0.5112727  0.9690598 #>"},{"path":"/reference/summary.kb.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing kernel-based quadratic distance results — summary.kb.test","title":"Summarizing kernel-based quadratic distance results — summary.kb.test","text":"summary method class kb.test","code":""},{"path":"/reference/summary.kb.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing kernel-based quadratic distance results — summary.kb.test","text":"","code":"# S4 method for class 'kb.test' summary(object)"},{"path":"/reference/summary.kb.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing kernel-based quadratic distance results — summary.kb.test","text":"object Object class kb.test","code":""},{"path":"/reference/summary.kb.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing kernel-based quadratic distance results — summary.kb.test","text":"List following components: summary_tables Table computed descriptive statistics per variable (per group available). test_results Data frame results performed kernel-based quadratic distance test. qqplots Figure qq-plots variable.","code":""},{"path":[]},{"path":"/reference/summary.kb.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing kernel-based quadratic distance results — summary.kb.test","text":"","code":"# create a kb.test object x <- matrix(rnorm(100),ncol=2) # Normality test my_test <- kb.test(x, h=0.5) summary(my_test)  #>  #>  Kernel-based quadratic distance Normality test  #>   Statistic       Value Critical_Value Reject_H0 #> 1        Un -0.07807674       1.734051     FALSE #> 2        Vn  0.55877213       6.071062     FALSE #> $summary_tables #>                V1          V2 #> mean    0.2225601 -0.01276311 #> sd      1.0933236  1.14937193 #> median  0.2061474  0.14471308 #> IQR     1.3443250  1.40042674 #> min    -1.5643294 -4.11865455 #> max     3.5340310  2.55373421 #>  #> $test_results #>   Statistic       Value Critical_Value Reject_H0 #> 1        Un -0.07807674       1.734051     FALSE #> 2        Vn  0.55877213       6.071062     FALSE #>  #> $qqplots  #>"},{"path":"/reference/summary.pk.test.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing kernel-based quadratic distance results — summary.pk.test","title":"Summarizing kernel-based quadratic distance results — summary.pk.test","text":"summary method class pk.test","code":""},{"path":"/reference/summary.pk.test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing kernel-based quadratic distance results — summary.pk.test","text":"","code":"# S4 method for class 'pk.test' summary(object)"},{"path":"/reference/summary.pk.test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing kernel-based quadratic distance results — summary.pk.test","text":"object Object class pk.test","code":""},{"path":"/reference/summary.pk.test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing kernel-based quadratic distance results — summary.pk.test","text":"List following components: summary_tables Table computed descriptive statistics per variable. test_results Data frame results performed Poisson kernel-based test. qqplots Figure qq-plots variable uniform distribution.","code":""},{"path":[]},{"path":"/reference/summary.pk.test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing kernel-based quadratic distance results — summary.pk.test","text":"","code":"# create a pk.test object x_sp <- sample_hypersphere(3, n_points=100) unif_test <- pk.test(x_sp,rho=0.8) summary(unif_test) #>  #>  Poisson Kernel-based quadratic distance test of  #>                         Uniformity on the Sphere  #>   Test_Statistics Critical_Value Reject_H0 #> 1       0.2207214       1.722025     FALSE #> 2      45.0602797      52.230766     FALSE  #> $summary_tables #>                 V1          V2          V3 #> mean   -0.09616741  0.08709887 -0.01460631 #> sd      0.57359035  0.57642804  0.57585233 #> median -0.17876519  0.20832080 -0.04974959 #> IQR     0.95429937  0.89814932  1.00133903 #> min    -0.99451952 -0.97609712 -0.92478198 #> max     0.94196356  0.98234388  0.93822530 #>  #> $test_results #>   Test_Statistics Critical_Value Reject_H0 #> 1       0.2207214       1.722025     FALSE #> 2      45.0602797      52.230766     FALSE #>  #> $qqplots  #>"},{"path":"/reference/summary.pkbc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing PKBD mixture Fits — summary.pkbc","title":"Summarizing PKBD mixture Fits — summary.pkbc","text":"Summary method class \"pkbc\"","code":""},{"path":"/reference/summary.pkbc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing PKBD mixture Fits — summary.pkbc","text":"","code":"# S4 method for class 'pkbc' summary(object)"},{"path":"/reference/summary.pkbc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing PKBD mixture Fits — summary.pkbc","text":"object Object class pkbc","code":""},{"path":"/reference/summary.pkbc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarizing PKBD mixture Fits — summary.pkbc","text":"Display logLikelihood values within cluster sum squares (wcss) values number clusters provided. values estimated mixing proportions showed together table assigned memberships.","code":""},{"path":[]},{"path":"/reference/summary.pkbc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarizing PKBD mixture Fits — summary.pkbc","text":"","code":"dat <- rbind(matrix(rnorm(100),2),matrix(rnorm(100,5),2)) res <- pkbc(dat,2:4) summary(res) #> Poisson Kernel-Based Clustering on the Sphere (pkbc) Results #> ------------------------------------------------------------ #>  #> Summary: #>         LogLik     WCSS #> [1,]  744.1161 4.978247 #> [2,] 1104.1246 4.049000 #> [3,] 1391.2432 4.000000 #>  #> Results for 2 clusters: #> Estimated Mixing Proportions (alpha): #> [1] 0.2879668 0.7120332 #>  #> Clustering table: #>  #> 1 2  #> 1 3  #>  #>  #> Results for 3 clusters: #> Estimated Mixing Proportions (alpha): #> [1] 0.25 0.25 0.50 #>  #> Clustering table: #>  #> 1 2 3  #> 1 1 2  #>  #>  #> Results for 4 clusters: #> Estimated Mixing Proportions (alpha): #> [1] 0.25 0.25 0.25 0.25 #>  #> Clustering table: #>  #> 1 2 3 4  #> 1 1 1 1  #>  #>"},{"path":"/reference/var_k.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact variance of k-sample test — var_k","title":"Exact variance of k-sample test — var_k","text":"Compute exact variance kernel test k-sample problem null hypothesis F1=...=Fk.","code":""},{"path":"/reference/var_k.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact variance of k-sample test — var_k","text":"","code":"var_k(Kcen, sizes, cum_size)"},{"path":"/reference/var_k.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact variance of k-sample test — var_k","text":"Kcen matrix centered kernel values sizes vector indicating sample's size. cum_size vector indicating sample's cumulative sizes.","code":""},{"path":"/reference/var_k.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact variance of k-sample test — var_k","text":"value computed variance.","code":""},{"path":"/reference/var_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact variance of normality test — var_norm","title":"Exact variance of normality test — var_norm","text":"Compute exact variance kernel test normality null hypothesis G=N(0,).","code":""},{"path":"/reference/var_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact variance of normality test — var_norm","text":"","code":"var_norm(Sigma_h, V, n)"},{"path":"/reference/var_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact variance of normality test — var_norm","text":"Sigma_h covariance matrix gaussian kernel V Covariance matrix tested distribution G n sample size","code":""},{"path":"/reference/var_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact variance of normality test — var_norm","text":"value computed variance","code":""},{"path":"/reference/var_two.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact variance of two-sample test — var_two","title":"Exact variance of two-sample test — var_two","text":"Compute exact variance kernel test two-sample problem null hypothesis F=G.","code":""},{"path":"/reference/var_two.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact variance of two-sample test — var_two","text":"","code":"var_two(Kcen, nsamples)"},{"path":"/reference/var_two.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact variance of two-sample test — var_two","text":"Kcen matrix centered kernel values nsamples vector indicating sample's membership.","code":""},{"path":"/reference/var_two.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exact variance of two-sample test — var_two","text":"value computed variance.","code":""},{"path":"/reference/wine.html","id":null,"dir":"Reference","previous_headings":"","what":"Wine data set — wine","title":"Wine data set — wine","text":"wine data frame 178 rows 14 columns. first 13 variables report 13 constituents found three types wines. last column indicates class labels (1,2 3).","code":""},{"path":"/reference/wine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wine data set — wine","text":"","code":"wine"},{"path":"/reference/wine.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wine data set — wine","text":"data frame containing following columns: Alcohol Malic acid Ash Alcalinity ash Magnesium Total phenols Flavanoids Nonflavanoid phenols Proanthocyanins Color intensity Hue OD280/OD315 diluted wines Proline y: class membership","code":""},{"path":"/reference/wine.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Wine data set — wine","text":"Aeberhard, S. Forina, M. (1991). Wine. UCI Machine Learning Repository. https://doi.org/10.24432/C5PC7J.","code":""},{"path":"/reference/wine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wine data set — wine","text":"data results chemical analysis wines grown region Italy derived three different cultivars. analysis determined quantities 13 constituents found three types wines.","code":""},{"path":"/reference/wine.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wine data set — wine","text":"Aeberhard, S., Coomans, D. De Vel, O. (1994). Comparative analysis statistical pattern recognition methods high dimensional settings. Pattern Recognition, 27(8), 1065-1077.","code":""},{"path":"/reference/wine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wine data set — wine","text":"","code":"data(wine) summary(wine) #>     Alcohol        Malicacid          Ash        Alcalinity_of_ash #>  Min.   :11.03   Min.   :0.740   Min.   :1.360   Min.   :10.60     #>  1st Qu.:12.36   1st Qu.:1.603   1st Qu.:2.210   1st Qu.:17.20     #>  Median :13.05   Median :1.865   Median :2.360   Median :19.50     #>  Mean   :13.00   Mean   :2.336   Mean   :2.367   Mean   :19.49     #>  3rd Qu.:13.68   3rd Qu.:3.083   3rd Qu.:2.558   3rd Qu.:21.50     #>  Max.   :14.83   Max.   :5.800   Max.   :3.230   Max.   :30.00     #>    Magnesium      Total_phenols     Flavanoids    Nonflavanoid_phenols #>  Min.   : 70.00   Min.   :0.980   Min.   :0.340   Min.   :0.1300       #>  1st Qu.: 88.00   1st Qu.:1.742   1st Qu.:1.205   1st Qu.:0.2700       #>  Median : 98.00   Median :2.355   Median :2.135   Median :0.3400       #>  Mean   : 99.74   Mean   :2.295   Mean   :2.029   Mean   :0.3619       #>  3rd Qu.:107.00   3rd Qu.:2.800   3rd Qu.:2.875   3rd Qu.:0.4375       #>  Max.   :162.00   Max.   :3.880   Max.   :5.080   Max.   :0.6600       #>  Proanthocyanins Color_intensity       Hue         #>  Min.   :0.410   Min.   : 1.280   Min.   :0.4800   #>  1st Qu.:1.250   1st Qu.: 3.220   1st Qu.:0.7825   #>  Median :1.555   Median : 4.690   Median :0.9650   #>  Mean   :1.591   Mean   : 5.058   Mean   :0.9574   #>  3rd Qu.:1.950   3rd Qu.: 6.200   3rd Qu.:1.1200   #>  Max.   :3.580   Max.   :13.000   Max.   :1.7100   #>  X0D280_0D315_of_diluted_wines    Proline             y         #>  Min.   :1.270                 Min.   : 278.0   Min.   :1.000   #>  1st Qu.:1.938                 1st Qu.: 500.5   1st Qu.:1.000   #>  Median :2.780                 Median : 673.5   Median :2.000   #>  Mean   :2.612                 Mean   : 746.9   Mean   :1.938   #>  3rd Qu.:3.170                 3rd Qu.: 985.0   3rd Qu.:3.000   #>  Max.   :4.000                 Max.   :1680.0   Max.   :3.000"},{"path":"/reference/wireless.html","id":null,"dir":"Reference","previous_headings":"","what":"Wireless Indoor Localization — wireless","title":"Wireless Indoor Localization — wireless","text":"wireless data frame 2000 rows 8 columns. first 7 variables report measurements Wi-Fi signal strength received 7 Wi-Fi routers office location Pittsburgh (USA). last column indicates class labels.","code":""},{"path":"/reference/wireless.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wireless Indoor Localization — wireless","text":"","code":"wireless"},{"path":"/reference/wireless.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wireless Indoor Localization — wireless","text":"data frame containing following columns: V1 Signal strength router 1. V2 Signal strength router 2. V3 Signal strength router 3. V4 Signal strength router 4. V5 Signal strength router 5. V6 Signal strength router 6. V7 Signal strength router 7. V8 Group memberships, 1 4.","code":""},{"path":"/reference/wireless.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Wireless Indoor Localization — wireless","text":"Bhatt, R. (2017). Wireless Indoor Localization. UCI Machine Learning Repository.  https://doi.org/10.24432/C51880.","code":""},{"path":"/reference/wireless.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Wireless Indoor Localization — wireless","text":"Wi-Fi signal strength measured dBm, decibel milliwatts, expressed negative value ranging -100 0. labels correspond 4 different rooms. total, 4 groups 500 observations .","code":""},{"path":"/reference/wireless.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wireless Indoor Localization — wireless","text":"Rohra, J.G., Perumal, B., Narayanan, S.J., Thakur, P. Bhatt, R.B. (2017). \"User Localization Indoor Environment Using Fuzzy Hybrid Particle Swarm Optimization & Gravitational Search Algorithm Neural Networks\". : Deep, K., et al. Proceedings Sixth International Conference Soft Computing Problem Solving. Advances Intelligent Systems Computing, vol 546. Springer, Singapore. https://doi.org/10.1007/978-981-10-3322-3_27","code":""},{"path":"/reference/wireless.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wireless Indoor Localization — wireless","text":"","code":"data(wireless) summary(wireless) #>        V1               V2               V3               V4         #>  Min.   :-74.00   Min.   :-74.00   Min.   :-73.00   Min.   :-77.00   #>  1st Qu.:-61.00   1st Qu.:-58.00   1st Qu.:-58.00   1st Qu.:-63.00   #>  Median :-55.00   Median :-56.00   Median :-55.00   Median :-56.00   #>  Mean   :-52.33   Mean   :-55.62   Mean   :-54.96   Mean   :-53.57   #>  3rd Qu.:-46.00   3rd Qu.:-53.00   3rd Qu.:-51.00   3rd Qu.:-46.00   #>  Max.   :-10.00   Max.   :-45.00   Max.   :-40.00   Max.   :-11.00   #>        V5               V6               V7               V8       #>  Min.   :-89.00   Min.   :-97.00   Min.   :-98.00   Min.   :1.00   #>  1st Qu.:-69.00   1st Qu.:-86.00   1st Qu.:-87.00   1st Qu.:1.75   #>  Median :-64.00   Median :-82.00   Median :-83.00   Median :2.50   #>  Mean   :-62.64   Mean   :-80.98   Mean   :-81.73   Mean   :2.50   #>  3rd Qu.:-56.00   3rd Qu.:-77.00   3rd Qu.:-78.00   3rd Qu.:3.25   #>  Max.   :-36.00   Max.   :-61.00   Max.   :-63.00   Max.   :4.00"},{"path":[]},{"path":"/news/index.html","id":"new-features-1-1-2","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"QuadratiK 1.1.2 (Development version)","text":"Added NEWS.md file detailed information README file documentation (methods usable clearer broader audience).","code":""},{"path":"/news/index.html","id":"minor-improvements-1-1-2","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"QuadratiK 1.1.2 (Development version)","text":"Added badges rOpenSci review status, test coverage, R CMD CHECK, CRAN downloads Addition test codes testthat package. particular, testing random sampling PKBD wrapped Cauchy distribution equivalent.","code":""},{"path":"/news/index.html","id":"bug-fixes-1-1-2","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"QuadratiK 1.1.2 (Development version)","text":"scatter-plots related clustering algorithm results. computation evaluation measures (pkdc_validation function) true labels provided.","code":""},{"path":[]},{"path":"/news/index.html","id":"quadratik-111-2024-06-05","dir":"Changelog","previous_headings":"","what":"QuadratiK 1.1.1 (2024-06-05)","title":"QuadratiK 1.1.1 (2024-06-05)","text":"CRAN release: 2024-06-05","code":""},{"path":"/news/index.html","id":"new-features-1-1-1","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"QuadratiK 1.1.1 (2024-06-05)","text":"Improve computation variance k-sample test Add breast_cancer wine data sets","code":""},{"path":"/news/index.html","id":"minor-improvements-1-1-1","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"QuadratiK 1.1.1 (2024-06-05)","text":"print() summary() methods kb.test object two k-sample tests","code":""},{"path":"/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"QuadratiK 1.1.1 (2024-06-05)","text":"Computation test statistics normality test","code":""},{"path":"/news/index.html","id":"documentation-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"QuadratiK 1.1.1 (2024-06-05)","text":"Correction typos","code":""},{"path":"/news/index.html","id":"quadratik-110-2024-05-14","dir":"Changelog","previous_headings":"","what":"QuadratiK 1.1.0 (2024-05-14)","title":"QuadratiK 1.1.0 (2024-05-14)","text":"CRAN release: 2024-05-14","code":""},{"path":"/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"QuadratiK 1.1.0 (2024-05-14)","text":"Add GitHub links DESCRIPTION file Add unit tests Add CONTRIBUTING.md Add srr standards categories: General, Clustering Probability Distributions Add methods clustering object pkbc: show(), summary(), estract_stats(), plot() predict() Add vignette generate_rpkb.Rmd Add CODE_OF_CONDUCT.md Create GitHub page using pkgdown Add V-statistic Normality test, corresponding Critical Value Degrees Freedom function DOF_norm() Update kb.test S4 class slots, kb.test() function, unit-test codes, summary() print() method including V-statistic Add Trace statistic two k-sample tests Add computation Variance two k-sample tests","code":""},{"path":"/news/index.html","id":"minor-improvements-1-1-0","dir":"Changelog","previous_headings":"","what":"MINOR IMPROVEMENTS","title":"QuadratiK 1.1.0 (2024-05-14)","text":"Addition GitHub workflows R-CMD-check, test-coverage pkgcheck Update codes check arguments function pk.test() Update codes check arguments function kb.test() select_h() Modify indentation assignments (using ‘<-’) following goodpractice standards Update references README.md file","code":""},{"path":"/news/index.html","id":"bug-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"BUG FIXES","title":"QuadratiK 1.1.0 (2024-05-14)","text":"Add codemeta.json .Rbuildignore Add CONTRIBUTING.md .Rbuildignore Fix warning internal function compare_qq() Add doc folder .gitignore Modify returned test statistics multiplying sample size Remove “Nonparam” centering option Normality test Critical value V-statistic divided variance function pk.test()","code":""},{"path":"/news/index.html","id":"deprecated-and-defunct-1-1-0","dir":"Changelog","previous_headings":"","what":"DEPRECATED AND DEFUNCT","title":"QuadratiK 1.1.0 (2024-05-14)","text":"summary_stat() validation() substituted estract_stats() pkbc_validation()","code":""},{"path":"/news/index.html","id":"documentation-fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"DOCUMENTATION FIXES","title":"QuadratiK 1.1.0 (2024-05-14)","text":"C++ functions set internal functions Correction typos Remove Date DESCRIPTION Update References DESCRIPTION file","code":""},{"path":"/news/index.html","id":"quadratik-100-2024-02-23","dir":"Changelog","previous_headings":"","what":"QuadratiK 1.0.0 (2024-02-23)","title":"QuadratiK 1.0.0 (2024-02-23)","text":"CRAN release: 2024-02-23","code":""},{"path":"/news/index.html","id":"new-features-1-0-0","dir":"Changelog","previous_headings":"","what":"NEW FEATURES","title":"QuadratiK 1.0.0 (2024-02-23)","text":"released CRAN","code":""}]
